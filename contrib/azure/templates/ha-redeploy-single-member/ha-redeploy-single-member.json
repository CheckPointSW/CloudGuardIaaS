{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment location"
      },
      "defaultValue": "[resourceGroup().location]"
    },
    "cloudGuardVersion": {
      "type": "string",
      "allowedValues": [
        "R80.30 - Bring Your Own License",
        "R80.30 - Pay As You Go (NGTP)",
        "R80.30 - Pay As You Go (NGTX)",
        "R80.40 - Bring Your Own License",
        "R80.40 - Pay As You Go (NGTP)",
        "R80.40 - Pay As You Go (NGTX)",
        "R81 - Bring Your Own License",
        "R81 - Pay As You Go (NGTP)",
        "R81 - Pay As You Go (NGTX)",
        "R81.10 - Bring Your Own License",
        "R81.10 - Pay As You Go (NGTP)",
        "R81.10 - Pay As You Go (NGTX)"
      ],
      "defaultValue": "R81.10 - Bring Your Own License",
      "metadata": {
        "description": "Check Point CloudGuard version"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password"
      },
      "defaultValue": ""
    },
    "authenticationType": {
      "type": "string",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "defaultValue": "password",
      "metadata": {
        "description": "Authentication type"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Administrator SSH public key"
      }
    },
    "vmName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Name of the Check Point Cluster object"
      }
    },"memberID": {
      "type": "string",
      "defaultValue": "1",
	  "allowedValues": [
        "1",
        "2"
      ],
      "metadata": {
        "description": "ID of the Check Point Cluster member that is to be replaced 1 or 2"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "Size of the VM (must be identical as existing deployed VM)"
      }
    },
    "adminShell": {
      "type": "string",
      "defaultValue": "/etc/cli.sh",
      "allowedValues": [
        "/etc/cli.sh",
        "/bin/bash",
        "/bin/csh",
        "/bin/tcsh"
      ],
      "metadata": {
        "Description": "The default shell for the admin user"
      }
    },
    "sicKey": {
      "type": "securestring",
      "metadata": {
        "description": "One time key for Secure Internal Communication"
      }
    },    
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "existing",
      "allowedValues": [
        "existing"
      ],
      "metadata": {
        "Description": "Indicates whether the virtual network is new or existing"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network"
      },
      "defaultValue": "[concat(resourceGroup().name, '-vnet')]"
    },
	"virtualNetworkExistingRGName": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the existing virtual network"
      },
      "defaultValue": ""
    },
    "cluster-ip": {
      "type": "string",
      "metadata": {
        "description": "The address of the cluster-ip private address associated with eth0 network interface of the current active member of the cluster"
      },
      "defaultValue": ""
    },
    "bootstrapScript": {
      "type": "string",
      "metadata": {
        "description": "Bootstrap script"
      },
      "defaultValue": ""
    },
    "allowDownloadFromUploadToCheckPoint": {
      "type": "string",
      "allowedValues": [
        "true",
        "false"
      ],
      "defaultValue": "true",
      "metadata": {
        "description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point"
      }
    },
    "additionalDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Amount of additional disk space (in GB)"
      },
      "minValue": 0,
      "maxValue": 3995
    },
    "diskType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The type of the OS disk. Premium is applicable only to DS machine sizes"
      },
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ]
    },
    "role": {
      "type": "string",
      "defaultValue": "Contributor",
      "metadata": {
        "description": "Role"
      }
    },
    "managedSystemAssigned": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "yes",
      "metadata": {
        "description": "Automatically create a Service Principal for this deployment."
      }
    },
    "sourceImageVhdUri": {
      "type": "string",
      "defaultValue": "noCustomUri",
      "metadata": {
        "description": "The URI of the blob containing the development image"
      }
    },
    "availabilityOptions": {
      "type": "string",
      "allowedValues": [
        "Availability Set",
        "Availability Zones"
      ],
      "defaultValue": "Availability Set",
      "metadata": {
        "description": "Use replicated Cluster VMs in Availability Set or Availability Zones (must match existing deployed VM)"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Use the following URI when deploying a custom template: https://raw.githubusercontent.com/CheckPointSW/CloudGuardIaaS/master/azure/templates/"
      },
      "defaultValue": "https://raw.githubusercontent.com/CheckPointSW/CloudGuardIaaS/master/azure/templates/"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    },
    "customMetrics": {
      "type": "string",
      "allowedValues": [
        "no",
        "yes"
      ],
      "defaultValue": "yes",
      "metadata": {
        "Description": "Indicates whether CloudGuard Metrics will be used for Cluster members monitoring"
      }
    }
  },
  "variables": {
    "templateName": "ha",
    "templateVersion": "20220130",
    "location": "[parameters('location')]",
    "elbPublicIPName": "frontend-lb-address",
    "haPublicIPName": "[parameters('vmName')]",
    "offers": {
      "R80.30 - Bring Your Own License": "BYOL",
      "R80.30 - Pay As You Go (NGTP)": "NGTP-V2",
      "R80.30 - Pay As You Go (NGTX)": "NGTX-V2",
      "R80.40 - Bring Your Own License": "BYOL",
      "R80.40 - Pay As You Go (NGTP)": "NGTP",
      "R80.40 - Pay As You Go (NGTX)": "NGTX",
      "R81 - Bring Your Own License": "BYOL",
      "R81 - Pay As You Go (NGTP)": "NGTP",
      "R81 - Pay As You Go (NGTX)": "NGTX",
      "R81.10 - Bring Your Own License": "BYOL",
      "R81.10 - Pay As You Go (NGTP)": "NGTP",
      "R81.10 - Pay As You Go (NGTX)": "NGTX"
    },
    "offer": "[variables('offers')[parameters('cloudGuardVersion')]]",
    "osVersions": {
      "R80.30 - Bring Your Own License": "R8030",
      "R80.30 - Pay As You Go (NGTP)": "R8030",
      "R80.30 - Pay As You Go (NGTX)": "R8030",
      "R80.40 - Bring Your Own License": "R8040",
      "R80.40 - Pay As You Go (NGTP)": "R8040",
      "R80.40 - Pay As You Go (NGTX)": "R8040",
      "R81 - Bring Your Own License": "R81",
      "R81 - Pay As You Go (NGTP)": "R81",
      "R81 - Pay As You Go (NGTX)": "R81",
      "R81.10 - Bring Your Own License": "R8110",
      "R81.10 - Pay As You Go (NGTP)": "R8110",
      "R81.10 - Pay As You Go (NGTX)": "R8110"
    },
    "osVersion": "[variables('osVersions')[parameters('cloudGuardVersion')]]",
    "adminUsername": "notused",
    "isBlink": true,
    "storageAccountName": "[concat('bootdiag', uniqueString(resourceGroup().id, deployment().name))]",
    "storageAccountType": "Standard_LRS",
    "diskSize100GB": 100,
    "diskSizeGB": "[add(parameters('additionalDiskSizeGB'), variables('diskSize100GB'))]",
    "customData": "[concat('#!/usr/bin/python3 /etc/cloud_config.py\n', '\n', 'installationType=\"', variables('installationType'), '\"', '\n', 'allowUploadDownload=\"', variables('allowUploadDownload'), '\"', '\n', 'osVersion=\"', variables('osVersion'), '\"', '\n', 'templateName=\"', variables('templateName'), '\"', '\n', 'isBlink=\"', variables('isBlink'), '\"', '\n', 'templateVersion=\"', variables('templateVersion'), '\"', '\n', 'bootstrapScript64=\"', variables('bootstrapScript64'), '\"', '\n', 'location=\"', variables('location'), '\"', '\n', 'sicKey=\"', variables('sicKey'), '\"', '\n', 'location=\"', variables('location'), '\"', '\n', 'tenantId=\"', subscription().tenantId, '\"', '\n', 'virtualNetwork=\"', parameters('virtualNetworkName'), '\"', '\n', 'clusterName=\"', parameters('vmName'), '\"', '\n', 'externalPrivateAddresses=\"', variables('externalPrivateAddresses'), '\"', '\n', 'customMetrics=\"', variables('customMetrics'), '\"', '\n', 'adminShell=\"', parameters('adminShell'), '\"', '\n')]",
    "imageOffer": "[concat('check-point-cg-', toLower(variables('osVersion')))]",
    "imagePublisher": "checkpoint",
    "imageReferenceBYOL": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-byol",
      "version": "latest"
    },
    "imageReferenceNGTP": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp",
      "version": "latest"
    },
    "imageReferenceNGTP-V2": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp-v2",
      "version": "latest"
    },
    "imageReferenceNGTX": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtx",
      "version": "latest"
    },
    "imageReferenceNGTX-V2": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtx-v2",
      "version": "latest"
    },
    "imageReferenceMarketplace": "[if(equals(variables('offer'), 'BYOL'), variables('imageReferenceBYOL'), if(equals(variables('offer'), 'NGTP'), variables('imageReferenceNGTP'), if(equals(variables('offer'), 'NGTP-V2'), variables('imageReferenceNGTP-V2'), if(equals(variables('offer'), 'NGTX'), variables('imageReferenceNGTX'), if(equals(variables('offer'), 'NGTX-V2'), variables('imageReferenceNGTX-V2'), json('null'))))))]",
    "customImage": "customImage",
    "imageReferenceCustomUri": {
      "id": "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
    },
    "imageReference": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('imageReferenceMarketplace'), variables('imageReferenceCustomUri'))]",
    "nic1Name": "eth0",
    "nic2Name": "eth1",
    "elbName": "frontend-lb",
    "elbId": "[resourceId('Microsoft.Network/loadBalancers', variables('elbName'))]",
    "elbBEAddressPool": "[concat(variables('elbName'), '-pool')]",
    "elbBEAddressPoolID": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('elbName'), variables('elbBEAddressPool'))]",
    "ilbName": "backend-lb",
    "ilbId": "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]",
    "ilbBEAddressPool": "[concat(variables('ilbName'), '-pool')]",
    "ilbBEAddressPoolID": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools/', variables('ilbName'), variables('ilbBEAddressPool'))]",
    "ilbFEIPConfigID": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations/', variables('ilbName'), variables('ilbName'))]",
    "ilbProbeName": "[variables('ilbName')]",
    "ilbProbeID": "[resourceId('Microsoft.Network/loadBalancers/probes/', variables('ilbName'), variables('ilbProbeName'))]",
    "linuxConfigurationpassword": {
      "disablePasswordAuthentication": "false"
    },
    "appProbeName": "health_prob_port",
    "linuxConfigurationsshPublicKey": {
      "disablePasswordAuthentication": "true",
      "ssh": {
        "publicKeys": [
          {
            "keyData": "[parameters('sshPublicKey')]",
            "path": "/home/notused/.ssh/authorized_keys"
          }
        ]
      }
    },
    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'),  variables('linuxConfigurationpassword'), variables('linuxConfigurationsshPublicKey'))]",
    "planBYOL": {
      "name": "sg-byol",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP": {
      "name": "sg-ngtp",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP-V2": {
      "name": "sg-ngtp-v2",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTX": {
      "name": "sg-ngtx",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTX-V2": {
      "name": "sg-ngtx-v2",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "plan": "[if(equals(variables('offer'), 'BYOL') , variables('planBYOL'), if(equals(variables('offer'), 'NGTP'), variables('planNGTP'), if(equals(variables('offer'), 'NGTP-V2'), variables('planNGTP-V2'), if(equals(variables('offer'), 'NGTX'), variables('planNGTX'), if(equals(variables('offer'), 'NGTX-V2'), variables('planNGTX-V2'), json('null'))))))]",
    "externalPrivateAddresses": "[parameters('cluster-ip')]",
    "roleDefinitionId": "[if(equals(parameters('role'), 'Contributor'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), parameters('role'))]",
    "identity": "[json('{\"type\": \"SystemAssigned\"}')]",
    "nsgName": "[concat(parameters('vmName'), '-nsg')]",
    "elbPublicIPId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('elbPublicIPName'))]",
    "haPublicIPId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('haPublicIPName'))]",
    "gwPublicIPIds": [
      "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '1'))]",
      "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '2'))]"
    ],
    "availabilitySetName": "[concat(parameters('vmName'), '-AvailabilitySet')]",
    "count": 2,
    "bootstrapScript64": "[base64(parameters('bootstrapScript'))]",
    "allowUploadDownload": "[parameters('allowDownloadFromUploadToCheckPoint')]",
    "networkSetupURL": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vnet-2-subnet-ha2-', parameters('vnetNewOrExisting'), '.json', parameters('_artifactsLocationSasToken')))]",
    "sicKey": "[parameters('sicKey')]",
    "installationType": "cluster",
    "availabilityZonesLocations": [
      "australiaeast",
      "brazilsouth",
      "canadacentral",
      "centralus",
      "eastasia",
      "eastus",
      "eastus2",
      "francecentral",
      "germanywestcentral",
      "japaneast",
      "koreacentral",
      "northeurope",
      "norwayeast",
      "southafricanorth",
      "southcentralus",
      "southeastasia",
      "swedencentral",
      "uksouth",
      "usgovvirginia",
      "westeurope",
      "westus2",
      "westus3"
    ],
    "availabilitySetProperty": {
      "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
    },
    "useAZ": "[and(contains(variables('availabilityZonesLocations'), variables('location')), equals(parameters('availabilityOptions'), 'Availability Zones'))]",
    "customMetrics": "[parameters('customMetrics')]",
    "emptyString": "none",
    "deployNewVnet": "[equals(parameters('vnetNewOrExisting'), 'new')]",
    "vnetRGName": "[if(variables('deployNewVnet'), resourceGroup().name, parameters('virtualNetworkExistingRGName'))]"
  },
  "resources": [
    {
      "apiVersion": "2020-06-01",
      "name": "pid-6f13b00a-7546-4ab2-be9f-c66815cc6c8b-partnercenter",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2021-04-01",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false,
        "minimumTlsVersion": "TLS1_2"
      },
      "location": "[variables('location')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "condition": "[not(variables('useAZ'))]",
      "apiVersion": "2020-06-01",
      "location": "[variables('location')]",
      "name": "[concat(variables('availabilitySetName'))]",
      "properties": {
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "condition": "[not(equals(parameters('sourceImageVhdUri'), 'noCustomUri'))]",
      "type": "Microsoft.Compute/images",
      "apiVersion": "2020-06-01",
      "name": "[variables('customImage')]",
      "location": "[variables('location')]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "osState": "Generalized",
            "blobUri": "[parameters('sourceImageVhdUri')]",
            "storageAccountType": "Standard_LRS"
          }
        },
        "hyperVGeneration": "V1"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
        "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), parameters('memberID'))]",
      "zones": "[if(variables('useAZ'), array(parameters('memberID')), json('null'))]",
      "plan": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('plan'), json('null'))]",
      "identity": "[if(equals(parameters('managedSystemAssigned'), 'yes'), variables('identity'), json('null'))]",
      "properties": {
        "availabilitySet": "[if(not(variables('useAZ')), variables('availabilitySetProperty'), json('null'))]",
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2021-04-01').primaryEndpoints.blob]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), parameters('memberID'), '-', variables('nic1Name')))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), parameters('memberID'), '-', variables('nic2Name')))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "[variables('adminUsername')]",
          "computername": "[concat(toLower(parameters('vmName')), parameters('memberID'))]",
          "customData": "[base64(variables('customData'))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": "[variables('diskSizeGB')]",
            "name": "[concat(parameters('vmName'), parameters('memberID'))]",
            "managedDisk": {
              "storageAccountType": "[parameters('diskType')]"
            }
          }
        }
      }
    },

    {
      "condition": "[equals(parameters('managedSystemAssigned'), 'yes')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-04-01-preview",
      "name": "[guid(resourceGroup().id, concat(parameters('vmName'), parameters('memberID')))]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('vmName'), parameters('memberID')))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('roleDefinitionId')]",
        "scope": "[resourceGroup().id]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('vmName'), parameters('memberID'))), '2021-07-01', 'Full').identity.principalId]"
      }
    }    
  ],
  "outputs": {
	"DeploymentName": {
      "type": "string",
      "value": "[concat('bootdiag', resourceGroup().id, '-' ,deployment().name)]"
    }
  }
}