{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "metadata": {
          "description": "Deployment location"
        },
        "defaultValue": "[resourceGroup().location]"
      },
      "cloudGuardVersion": {
        "type": "string",
        "allowedValues": [
          "R80.30 - Bring Your Own License",
          "R80.30 - Pay As You Go (NGTP)",
          "R80.30 - Pay As You Go (NGTX)",
          "R80.40 - Bring Your Own License",
          "R80.40 - Pay As You Go (NGTP)",
          "R80.40 - Pay As You Go (NGTX)",
          "R81 - Bring Your Own License",
          "R81 - Pay As You Go (NGTP)",
          "R81 - Pay As You Go (NGTX)"
        ],
        "defaultValue": "R80.40 - Bring Your Own License",
        "metadata": {
          "description": "Check Point CloudGuard version"
        }
      },
      "adminPassword": {
        "type": "securestring",
        "metadata": {
          "description": "Administrator password"
        },
        "defaultValue": ""
      },
      "authenticationType": {
        "type": "string",
        "allowedValues": [
          "password",
          "sshPublicKey"
        ],
        "defaultValue": "password",
        "metadata": {
          "description": "Authentication type"
        }
      },
      "sshPublicKey": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Administrator SSH public key"
        }
      },
      "vmName": {
        "type": "string",
        "defaultValue": "[resourceGroup().name]",
        "metadata": {
          "description": "Name of the Check Point Cluster object"
        }
      },
      "vmSize": {
        "type": "string",
        "defaultValue": "Standard_D3_v2",
        "metadata": {
          "description": "Size of the VM"
        }
      },
      "sicKey": {
        "type": "securestring",
        "metadata": {
          "description": "One time key for Secure Internal Communication"
        }
      },
      "virtualNetworkName": {
        "type": "string",
        "metadata": {
          "description": "The name of the virtual network"
        },
        "defaultValue": "[concat(resourceGroup().name, '-vnet')]"
      },
      "virtualNetworkAddressPrefixes": {
        "type": "array",
        "metadata": {
          "description": "The address prefixes of the virtual network"
        },
        "defaultValue": [
          "10.0.0.0/16"
        ]
      },
      "subnet1Name": {
        "type": "string",
        "metadata": {
          "description": "The name of the frontend subnet"
        },
        "defaultValue": "Frontend"
      },
      "subnet1Prefix": {
        "type": "string",
        "metadata": {
          "description": "The address prefix of the frontend subnet"
        },
        "defaultValue": "10.0.1.0/24"
      },
      "subnet1StartAddress": {
        "type": "string",
        "metadata": {
          "description": "The first available address on the 1st subnet"
        },
        "defaultValue": "10.0.1.10"
      },
      "subnet2Name": {
        "type": "string",
        "metadata": {
          "description": "The name of the backend subnet"
        },
        "defaultValue": "Backend"
      },
      "subnet2Prefix": {
        "type": "string",
        "metadata": {
          "description": "The address prefix of the backend subnet"
        },
        "defaultValue": "10.0.2.0/24"
      },
      "subnet2StartAddress": {
        "type": "string",
        "metadata": {
          "description": "The first available address on the 2nd subnet"
        },
        "defaultValue": "10.0.2.10"
      },
      "vnetNewOrExisting": {
        "type": "string",
        "defaultValue": "new",
        "allowedValues": [
          "new",
          "existing"
        ],
        "metadata": {
          "Description": "Indicates whether the virtual network is new or existing"
        }
      },
      "virtualNetworkExistingRGName": {
        "type": "string",
        "metadata": {
          "description": "Resource Group of the existing virtual network"
        },
        "defaultValue": "[resourceGroup().name]"
      },
      "ipPrefix": {
        "type": "string",
        "allowedValues": [
          "yes",
          "no"
        ],
        "defaultValue": "no",
        "metadata": {
          "description": "Define if a Public IP Prefix should be created or not"
        }
      },
      "ipPrefixSize": {
        "type": "int",
        "defaultValue": 30,
        "allowedvalues": [
          28,
          29,
          30
        ],
        "metadata": {
          "description": "Define the size of the Public IP Prefix"
        }
      },
      "bootstrapScript": {
        "type": "string",
        "metadata": {
          "description": "Bootstrap script"
        },
        "defaultValue": ""
      },
      "allowDownloadFromUploadToCheckPoint": {
        "type": "string",
        "allowedValues": [
          "true",
          "false"
        ],
        "defaultValue": "true",
        "metadata": {
          "description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point"
        }
      },
      "additionalDiskSizeGB": {
        "type": "int",
        "defaultValue": 0,
        "metadata": {
          "description": "Amount of additional disk space (in GB)"
        },
        "minValue": 0,
        "maxValue": 3995
      },
      "diskType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "metadata": {
          "description": "The type of the OS disk. Premium is applicable only to DS machine sizes"
        },
        "allowedValues": [
          "Standard_LRS",
          "Premium_LRS"
        ]
      },
      "role": {
        "type": "string",
        "defaultValue": "Contributor",
        "metadata": {
          "description": "Role"
        }
      },
      "managedSystemAssigned": {
        "type": "string",
        "allowedValues": [
          "yes",
          "no"
        ],
        "defaultValue": "yes",
        "metadata": {
          "description": "Automatically create a Service Principal for this deployment."
        }
      },
      "sourceImageVhdUri": {
        "type": "string",
        "defaultValue": "noCustomUri",
        "metadata": {
          "description": "The URI of the blob containing the development image"
        }
      },
      "availabilityOptions": {
        "type": "string",
        "allowedValues": [
          "Availability Set",
          "Availability Zones"
        ],
        "defaultValue": "Availability Set",
        "metadata": {
          "description": "Use replicated Cluster VMs in Availability Set or Availability Zones"
        }
      },
      "_artifactsLocation": {
        "type": "string",
        "metadata": {
          "description": "The base URI where artifacts required by this template are located including a trailing '/'"
        },
        "defaultValue": "https://raw.githubusercontent.com/CheckPointSW/CloudGuardIaaS/master/azure/templates/"
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "metadata": {
          "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
        },
        "defaultValue": ""
      },
      "Check_PointTags": {
        "type": "object",
        "defaultValue": {
          "provider": "30DE18BC-F9F6-4F22-9D30-54B8E74CFD5F"
        }
      },
      "customMetrics": {
        "type": "string",
        "allowedValues": [
          "no",
          "yes"
        ],
        "defaultValue": "yes",
        "metadata": {
          "Description": "Indicates whether CloudGuard Metrics will be used for Cluster members monitoring"
        }
      }
    },
    "variables": {
      "templateName": "ha",
      "templateVersion": "20201102",
      "location": "[parameters('location')]",
      "elbPublicIPName": "frontend-lb-address",
      "haPublicIPName": "[parameters('vmName')]",
      "offers": {
        "R80.30 - Bring Your Own License": "BYOL",
        "R80.30 - Pay As You Go (NGTP)": "NGTP-V2",
        "R80.30 - Pay As You Go (NGTX)": "NGTX-V2",
        "R80.40 - Bring Your Own License": "BYOL",
        "R80.40 - Pay As You Go (NGTP)": "NGTP",
        "R80.40 - Pay As You Go (NGTX)": "NGTX",
        "R81 - Bring Your Own License": "BYOL",
        "R81 - Pay As You Go (NGTP)": "NGTP",
        "R81 - Pay As You Go (NGTX)": "NGTX"
      },
      "offer": "[variables('offers')[parameters('cloudGuardVersion')]]",
      "osVersions": {
        "R80.30 - Bring Your Own License": "R8030",
        "R80.30 - Pay As You Go (NGTP)": "R8030",
        "R80.30 - Pay As You Go (NGTX)": "R8030",
        "R80.40 - Bring Your Own License": "R8040",
        "R80.40 - Pay As You Go (NGTP)": "R8040",
        "R80.40 - Pay As You Go (NGTX)": "R8040",
        "R81 - Bring Your Own License": "R81",
        "R81 - Pay As You Go (NGTP)": "R81",
        "R81 - Pay As You Go (NGTX)": "R81"
      },
      "osVersion": "[variables('osVersions')[parameters('cloudGuardVersion')]]",
      "adminUsername": "notused",
      "isBlink": true,
      "storageAccountName": "[concat('bootdiag', uniqueString(resourceGroup().id, deployment().name))]",
      "storageAccountType": "Standard_LRS",
      "diskSize100GB": 100,
      "diskSizeGB": "[add(parameters('additionalDiskSizeGB'), variables('diskSize100GB'))]",
      "customData": "[concat('#!/usr/bin/python3 /etc/cloud_config.py\n', '\n', 'installationType=\"', variables('installationType'), '\"', '\n', 'allowUploadDownload=\"', variables('allowUploadDownload'), '\"', '\n', 'osVersion=\"', variables('osVersion'), '\"', '\n', 'templateName=\"', variables('templateName'), '\"', '\n', 'isBlink=\"', variables('isBlink'), '\"', '\n', 'templateVersion=\"', variables('templateVersion'), '\"', '\n', 'bootstrapScript64=\"', variables('bootstrapScript64'), '\"', '\n', 'location=\"', variables('location'), '\"', '\n', 'sicKey=\"', variables('sicKey'), '\"', '\n', 'location=\"', variables('location'), '\"', '\n', 'tenantId=\"', subscription().tenantId, '\"', '\n', 'virtualNetwork=\"', parameters('virtualNetworkName'), '\"', '\n', 'clusterName=\"', parameters('vmName'), '\"', '\n', 'externalPrivateAddresses=\"', variables('externalPrivateAddresses')[2], '\"', '\n', 'customMetrics=\"', variables('customMetrics'), '\"', '\n')]",
      "imageOffer": "[concat('check-point-cg-', toLower(variables('osVersion')))]",
      "imagePublisher": "checkpoint",
      "imageReferenceBYOL": {
        "offer": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]",
        "sku": "sg-byol",
        "version": "latest"
      },
      "imageReferenceNGTP": {
        "offer": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]",
        "sku": "sg-ngtp",
        "version": "latest"
      },
      "imageReferenceNGTP-V2": {
        "offer": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]",
        "sku": "sg-ngtp-v2",
        "version": "latest"
      },
      "imageReferenceNGTX": {
        "offer": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]",
        "sku": "sg-ngtx",
        "version": "latest"
      },
      "imageReferenceNGTX-V2": {
        "offer": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]",
        "sku": "sg-ngtx-v2",
        "version": "latest"
      },
      "imageReferenceMarketplace": "[if(equals(variables('offer'), 'BYOL'), variables('imageReferenceBYOL'), if(equals(variables('offer'), 'NGTP'), variables('imageReferenceNGTP'), if(equals(variables('offer'), 'NGTP-V2'), variables('imageReferenceNGTP-V2'), if(equals(variables('offer'), 'NGTX'), variables('imageReferenceNGTX'), if(equals(variables('offer'), 'NGTX-V2'), variables('imageReferenceNGTX-V2'), json('null'))))))]",
      "customImage": "customImage",
      "imageReferenceCustomUri": {
        "id": "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
      },
      "imageReference": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('imageReferenceMarketplace'), variables('imageReferenceCustomUri'))]",
      "nic1Name": "eth0",
      "nic2Name": "eth1",
      "elbName": "frontend-lb",
      "elbId": "[resourceId('Microsoft.Network/loadBalancers', variables('elbName'))]",
      "elbBEAddressPool": "[concat(variables('elbName'), '-pool')]",
      "elbBEAddressPoolID": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('elbName'), variables('elbBEAddressPool'))]",
      "ilbName": "backend-lb",
      "ilbId": "[resourceId('Microsoft.Network/loadBalancers', variables('ilbName'))]",
      "ilbBEAddressPool": "[concat(variables('ilbName'), '-pool')]",
      "ilbBEAddressPoolID": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools/', variables('ilbName'), variables('ilbBEAddressPool'))]",
      "ilbFEIPConfigID": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations/', variables('ilbName'), variables('ilbName'))]",
      "ilbProbeName": "[variables('ilbName')]",
      "ilbProbeID": "[resourceId('Microsoft.Network/loadBalancers/probes/', variables('ilbName'), variables('ilbProbeName'))]",
      "linuxConfigurationpassword": {
        "disablePasswordAuthentication": "false"
      },
      "appProbeName": "health_prob_port",
      "linuxConfigurationsshPublicKey": {
        "disablePasswordAuthentication": "true",
        "ssh": {
          "publicKeys": [
            {
              "keyData": "[parameters('sshPublicKey')]",
              "path": "/home/notused/.ssh/authorized_keys"
            }
          ]
        }
      },
      "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'),  variables('linuxConfigurationpassword'), variables('linuxConfigurationsshPublicKey'))]",
      "planBYOL": {
        "name": "sg-byol",
        "product": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]"
      },
      "planNGTP": {
        "name": "sg-ngtp",
        "product": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]"
      },
      "planNGTP-V2": {
        "name": "sg-ngtp-v2",
        "product": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]"
      },
      "planNGTX": {
        "name": "sg-ngtx",
        "product": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]"
      },
      "planNGTX-V2": {
        "name": "sg-ngtx-v2",
        "product": "[variables('imageOffer')]",
        "publisher": "[variables('imagePublisher')]"
      },
      "plan": "[if(equals(variables('offer'), 'BYOL') , variables('planBYOL'), if(equals(variables('offer'), 'NGTP'), variables('planNGTP'), if(equals(variables('offer'), 'NGTP-V2'), variables('planNGTP-V2'), if(equals(variables('offer'), 'NGTX'), variables('planNGTX'), if(equals(variables('offer'), 'NGTX-V2'), variables('planNGTX-V2'), json('null'))))))]",
      "externalPrivateAddresses": [
        "[parameters('Subnet1StartAddress')]",
        "[concat(split(parameters('subnet1StartAddress'), '.')[0],'.', split(parameters('subnet1StartAddress'), '.')[1],'.', split(parameters('subnet1StartAddress'), '.')[2],'.', string(add(int(split(parameters('subnet1StartAddress'), '.')[3]),1)))]",
        "[concat(split(parameters('subnet1StartAddress'), '.')[0],'.', split(parameters('subnet1StartAddress'), '.')[1],'.', split(parameters('subnet1StartAddress'), '.')[2],'.', string(add(int(split(parameters('subnet1StartAddress'), '.')[3]),2)))]"
      ],
      "roleDefinitionId": "[if(equals(parameters('role'), 'Contributor'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), parameters('role'))]",
      "identity": "[json('{\"type\": \"SystemAssigned\"}')]",
      "azureCloud": "[not(or(startsWith(variables('location'), 'china'), startsWith(variables('location'), 'germany')))]",
      "managedSystemAssigned": "[if(not(variables('azureCloud')), 'no', parameters('managedSystemAssigned'))]",
      "subnet2PrivateAddresses": [
        "[concat(split(parameters('subnet2StartAddress'), '.')[0],'.', split(parameters('subnet2StartAddress'), '.')[1],'.', split(parameters('subnet2StartAddress'), '.')[2],'.', string(add(int(split(parameters('subnet2StartAddress'), '.')[3]),1)))]",
        "[concat(split(parameters('subnet2StartAddress'), '.')[0],'.', split(parameters('subnet2StartAddress'), '.')[1],'.', split(parameters('subnet2StartAddress'), '.')[2],'.', string(add(int(split(parameters('subnet2StartAddress'), '.')[3]),2)))]"
      ],
      "nsgName": "[concat(parameters('vmName'), '-nsg')]",
      "elbPublicIPId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('elbPublicIPName'))]",
      "haPublicIPId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('haPublicIPName'))]",
      "gwPublicIPIds": [
        "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '1'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '2'))]"
      ],
      "availabilitySetName": "[concat(parameters('vmName'), '-AvailabilitySet')]",
      "count": 2,
      "bootstrapScript64": "[base64(parameters('bootstrapScript'))]",
      "allowUploadDownload": "[parameters('allowDownloadFromUploadToCheckPoint')]",
      "networkSetupURL": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vnet-2-subnet-ha2-', parameters('vnetNewOrExisting'), '.json', parameters('_artifactsLocationSasToken')))]",
      "sicKey": "[parameters('sicKey')]",
      "installationType": "cluster",
      "internalLBPrivateIPAddress": "[parameters('Subnet2StartAddress')]",
      "availabilityZonesLocations": [
        "centralus",
        "eastus2",
        "francecentral",
        "northeurope",
        "southeastasia",
        "westeurope",
        "westus2",
        "eastus",
        "uksouth"
      ],
      "availabilitySetProperty": {
        "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
      },
      "useAZ": "[and(contains(variables('availabilityZonesLocations'), variables('location')), equals(parameters('availabilityOptions'), 'Availability Zones'))]",
      "customMetrics": "[parameters('customMetrics')]",
      "ipPrefixName": "[concat(parameters('vmName'), '-ipprefix')]",
      "publicIPPrefixProperty": {
        "id": "[resourceId('Microsoft.Network/publicipprefixes',variables('ipPrefixName'))]"
      }
    },
    "resources": [
      {
        "apiVersion": "2020-06-01",
        "name": "pid-7fbd7ca2-a62c-5cb5-9b28-3900ca6dba8d",
        "type": "Microsoft.Resources/deployments",
        "properties": {
          "mode": "Incremental",
          "template": {
            "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
            "contentVersion": "1.0.0.0",
            "resources": []
          }
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "name": "[variables('storageAccountName')]",
        "apiVersion": "2019-06-01",
        "location": "[variables('location')]",
        "sku": {
          "name": "[variables('storageAccountType')]"
        },
        "kind": "Storage",
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
        "name": "networkNewSetup",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[variables('networkSetupURL')]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "location": {
              "value": "[variables('location')]"
            },
            "nsgName": {
              "value": "[variables('nsgName')]"
            },
            "virtualNetworkName": {
              "value": "[parameters('virtualNetworkName')]"
            },
            "virtualNetworkAddressPrefixes": {
              "value": "[parameters('virtualNetworkAddressPrefixes')]"
            },
            "subnet1Name": {
              "value": "[parameters('subnet1Name')]"
            },
            "subnet1Prefix": {
              "value": "[parameters('subnet1Prefix')]"
            },
            "subnet2Name": {
              "value": "[parameters('subnet2Name')]"
            },
            "subnet2Prefix": {
              "value": "[parameters('subnet2Prefix')]"
            }
          }
        }
      },
      {
        "condition": "[equals(parameters('vnetNewOrExisting'), 'existing')]",
        "name": "networkExistingSetup",
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "2020-06-01",
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "uri": "[variables('networkSetupURL')]",
            "contentVersion": "1.0.0.0"
          },
          "parameters": {
            "virtualNetworkName": {
              "value": "[parameters('virtualNetworkName')]"
            },
            "virtualNetworkExistingRGName": {
              "value": "[parameters('virtualNetworkExistingRGName')]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/availabilitySets",
        "condition": "[not(variables('useAZ'))]",
        "apiVersion": "2020-06-01",
        "location": "[variables('location')]",
        "name": "[concat(variables('availabilitySetName'))]",
        "properties": {
          "platformFaultDomainCount": 2
        },
        "sku": {
          "name": "Aligned"
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "condition": "[equals(parameters('ipPrefix'), 'yes')]",
        "type": "Microsoft.Network/publicipprefixes",
        "apiVersion": "2020-06-01",
        "name": "[variables('ipPrefixName')]",
        "location": "[variables('location')]",
        "properties": {
          "prefixLength": "[parameters('ipPrefixSize')]",
          "publicIPAddressVersion": "IPv4"
        },
        "sku": {
          "name": "Standard",
          "tier": "Regional"
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicipprefixes',variables('ipPrefixName'))]"
        ],
        "location": "[variables('location')]",
        "name": "[variables('elbPublicIPName')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "idleTimeoutInMinutes": 30,
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', uniquestring(resourceGroup().id, deployment().name))]"
          },
          "publicIPPrefix": "[if(equals(parameters('ipPrefix'), 'yes'), variables('publicIPPrefixProperty'), json('null'))]"
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicipprefixes',variables('ipPrefixName'))]"
        ],
        "location": "[variables('location')]",
        "name": "[concat(parameters('vmName'), copyIndex(1))]",
        "sku": {
          "name": "Standard"
        },
        "copy": {
          "name": "publicAddressCopy",
          "count": "[variables('count')]"
        },
        "properties": {
          "idleTimeoutInMinutes": 30,
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', copyIndex(1), '-', uniquestring(resourceGroup().id, deployment().name))]"
          },
          "publicIPPrefix": "[if(equals(parameters('ipPrefix'), 'yes'), variables('publicIPPrefixProperty'), json('null'))]"
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "[resourceId('Microsoft.Network/publicipprefixes',variables('ipPrefixName'))]"
        ],
        "location": "[variables('location')]",
        "name": "[parameters('vmName')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "idleTimeoutInMinutes": 30,
          "publicIPAllocationMethod": "Static",
          "dnsSettings": {
            "domainNameLabel": "[concat(toLower(parameters('vmName')), '-vip-', uniquestring(resourceGroup().id, deployment().name))]"
          },
          "publicIPPrefix": "[if(equals(parameters('ipPrefix'), 'yes'), variables('publicIPPrefixProperty'), json('null'))]"
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "[coalesce(resourceId('Microsoft.Resources/deployments', 'networkNewSetup'), resourceId('Microsoft.Resources/deployments', 'networkExistingSetup'))]",
          "[variables('elbId')]",
          "[variables('gwPublicIPIds')[0]]",
          "[variables('haPublicIPId')]"
        ],
        "location": "[variables('location')]",
        "name": "[concat(parameters('vmName'), '1-', variables('nic1Name'))]",
        "properties": {
          "primary": true,
          "enableIPForwarding": true,
          "enableAcceleratedNetworking": "[not(equals(variables('osVersion'), 'R8010'))]",
          "ipConfigurations": [
            {
              "name": "member-ip",
              "properties": {
                "primary": true,
                "privateIPAddress": "[variables('externalPrivateAddresses')[0]]",
                "privateIPAllocationMethod": "Static",
                "PublicIpAddress": {
                  "Id": "[variables('gwPublicIPIds')[0]]"
                },
                "subnet": {
                  "id": "[resourceId(parameters('virtualNetworkExistingRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnet1Name'))]"
                },
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "[variables('elbBEAddressPoolID')]"
                  }
                ]
              }
            },
            {
              "name": "cluster-vip",
              "properties": {
                "primary": false,
                "privateIPAddress": "[variables('externalPrivateAddresses')[2]]",
                "privateIPAllocationMethod": "Static",
                "PublicIpAddress": {
                  "Id": "[variables('haPublicIPId')]"
                },
                "subnet": {
                  "id": "[resourceId(parameters('virtualNetworkExistingRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnet1Name'))]"
                }
              }
            }
          ]
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "[coalesce(resourceId('Microsoft.Resources/deployments', 'networkNewSetup'), resourceId('Microsoft.Resources/deployments', 'networkExistingSetup'))]",
          "[variables('elbId')]",
          "[variables('gwPublicIPIds')[1]]"
        ],
        "location": "[variables('location')]",
        "name": "[concat(parameters('vmName'), '2-', variables('nic1Name'))]",
        "properties": {
          "primary": true,
          "enableIPForwarding": true,
          "enableAcceleratedNetworking": "[not(equals(variables('osVersion'), 'R8010'))]",
          "ipConfigurations": [
            {
              "name": "member-ip",
              "properties": {
                "primary": true,
                "privateIPAddress": "[variables('externalPrivateAddresses')[1]]",
                "privateIPAllocationMethod": "Static",
                "PublicIpAddress": {
                  "Id": "[variables('gwPublicIPIds')[1]]"
                },
                "subnet": {
                  "id": "[resourceId(parameters('virtualNetworkExistingRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnet1Name'))]"
                },
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "[variables('elbBEAddressPoolID')]"
                  }
                ]
              }
            }
          ]
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "[coalesce(resourceId('Microsoft.Resources/deployments', 'networkNewSetup'), resourceId('Microsoft.Resources/deployments', 'networkExistingSetup'))]",
          "[variables('ilbId')]"
        ],
        "location": "[variables('location')]",
        "name": "[concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name'))]",
        "copy": {
          "name": "internalNicCopy",
          "count": "[variables('count')]"
        },
        "properties": {
          "primary": false,
          "enableIPForwarding": true,
          "enableAcceleratedNetworking": "[not(equals(variables('osVersion'), 'R8010'))]",
          "ipConfigurations": [
            {
              "name": "member-ip",
              "properties": {
                "primary": true,
                "privateIPAddress": "[variables('subnet2PrivateAddresses')[copyIndex()]]",
                "privateIPAllocationMethod": "Static",
                "subnet": {
                  "id": "[resourceId(parameters('virtualNetworkExistingRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnet2Name'))]"
                },
                "loadBalancerBackendAddressPools": [
                  {
                    "id": "[variables('ilbBEAddressPoolID')]"
                  }
                ]
              }
            }
          ]
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "condition": "[not(equals(parameters('sourceImageVhdUri'), 'noCustomUri'))]",
        "type": "Microsoft.Compute/images",
        "apiVersion": "2020-06-01",
        "name": "[variables('customImage')]",
        "location": "[variables('location')]",
        "properties": {
          "storageProfile": {
            "osDisk": {
              "osType": "Linux",
              "osState": "Generalized",
              "blobUri": "[parameters('sourceImageVhdUri')]",
              "storageAccountType": "Standard_LRS"
            }
          },
          "hyperVGeneration": "V1"
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic1Name')))]",
          "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name')))]",
          "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
        ],
        "location": "[variables('location')]",
        "name": "[concat(parameters('vmName'), copyIndex(1))]",
        "zones": "[if(variables('useAZ'), array(copyIndex(1)), json('null'))]",
        "copy": {
          "name": "virtualMachineCopy",
          "count": "[variables('count')]"
        },
        "plan": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('plan'), json('null'))]",
        "identity": "[if(equals(variables('managedSystemAssigned'), 'yes'), variables('identity'), json('null'))]",
        "properties": {
          "availabilitySet": "[if(not(variables('useAZ')), variables('availabilitySetProperty'), json('null'))]",
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": "true",
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2018-07-01').primaryEndpoints.blob]"
            }
          },
          "hardwareProfile": {
            "vmSize": "[parameters('vmSize')]"
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic1Name')))]",
                "properties": {
                  "primary": true
                }
              },
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name')))]",
                "properties": {
                  "primary": false
                }
              }
            ]
          },
          "osProfile": {
            "adminPassword": "[parameters('adminPassword')]",
            "adminUsername": "[variables('adminUsername')]",
            "computername": "[concat(toLower(parameters('vmName')), copyIndex(1))]",
            "customData": "[base64(variables('customData'))]",
            "linuxConfiguration": "[variables('linuxConfiguration')]"
          },
          "storageProfile": {
            "imageReference": "[variables('imageReference')]",
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "diskSizeGB": "[variables('diskSizeGB')]",
              "name": "[concat(parameters('vmName'), copyIndex(1))]",
              "managedDisk": {
                "storageAccountType": "[parameters('diskType')]"
              }
            }
          }
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "[variables('elbPublicIPId')]"
        ],
        "name": "[variables('elbName')]",
        "location": "[variables('location')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "LoadBalancerFrontend",
              "properties": {
                "publicIPAddress": {
                  "id": "[variables('elbPublicIPId')]"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[variables('elbBEAddressPool')]"
            }
          ],
          "probes": [
            {
              "name": "[variables('appProbeName')]",
              "properties": {
                "protocol": "tcp",
                "port": 8117,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
          ]
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "condition": "[equals(variables('managedSystemAssigned'), 'yes')]",
        "type": "Microsoft.Authorization/roleAssignments",
        "apiVersion": "2020-04-01-preview",
        "name": "[guid(resourceGroup().id, concat(parameters('vmName'), copyIndex(1)))]",
        "copy": {
          "name": "virtualMachineCopy",
          "count": "[variables('count')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('vmName'), copyIndex(1)))]"
        ],
        "properties": {
          "roleDefinitionId": "[variables('roleDefinitionId')]",
          "scope": "[resourceGroup().id]",
          "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('vmName'), copyIndex(1))), '2018-10-01', 'Full').identity.principalId]"
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      },
      {
        "type": "Microsoft.Network/loadBalancers",
        "apiVersion": "2020-06-01",
        "dependsOn": [
          "[coalesce(resourceId('Microsoft.Resources/deployments', 'networkNewSetup'), resourceId('Microsoft.Resources/deployments', 'networkExistingSetup'))]"
        ],
        "name": "[variables('ilbName')]",
        "location": "[variables('location')]",
        "sku": {
          "name": "Standard"
        },
        "properties": {
          "frontendIPConfigurations": [
            {
              "name": "[variables('ilbName')]",
              "properties": {
                "privateIPAllocationMethod": "Static",
                "privateIPAddress": "[variables('internalLBPrivateIPAddress')]",
                "subnet": {
                  "id": "[resourceId(parameters('virtualNetworkExistingRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('subnet2Name'))]"
                }
              }
            }
          ],
          "backendAddressPools": [
            {
              "name": "[variables('ilbBEAddressPool')]"
            }
          ],
          "loadBalancingRules": [
            {
              "name": "[variables('ilbName')]",
              "properties": {
                "frontendIPConfiguration": {
                  "id": "[variables('ilbFEIPConfigID')]"
                },
                "backendAddressPool": {
                  "id": "[variables('ilbBEAddressPoolID')]"
                },
                "probe": {
                  "id": "[variables('ilbProbeID')]"
                },
                "protocol": "All",
                "frontendPort": 0,
                "backendPort": 0,
                "loadDistribution": "Default",
                "enableFloatingIP": false
              }
            }
          ],
          "probes": [
            {
              "name": "[variables('ilbProbeName')]",
              "properties": {
                "protocol": "tcp",
                "port": 8117,
                "intervalInSeconds": 5,
                "numberOfProbes": 2
              }
            }
          ]
        },
        "tags": {
          "provider": "[toUpper(parameters('Check_PointTags').provider)]"
        }
      }
    ],
    "outputs": {
      "HaIPAddr": {
        "type": "string",
        "value": "[reference(variables('haPublicIPId')).IpAddress]"
      },
      "HaFQDN": {
        "type": "string",
        "value": "[reference(variables('haPublicIPId')).dnsSettings.fqdn]"
      },
      "Member1IPAddr": {
        "type": "string",
        "value": "[reference(variables('gwPublicIPIds')[0]).IpAddress]"
      },
      "Member1FQDN": {
        "type": "string",
        "value": "[reference(variables('gwPublicIPIds')[0]).dnsSettings.fqdn]"
      },
      "Member2IPAddr": {
        "type": "string",
        "value": "[reference(variables('gwPublicIPIds')[1]).IpAddress]"
      },
      "Member2FQDN": {
        "type": "string",
        "value": "[reference(variables('gwPublicIPIds')[1]).dnsSettings.fqdn]"
      }
    }
  }