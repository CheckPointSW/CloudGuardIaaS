{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment location"
      }
    },
    "cloudGuardVersion": {
      "type": "string",
      "allowedValues": [
        "R80.10 - Bring Your Own License",
        "R80.10 - Pay As You Go (NGTP)",
        "R80.10 - Pay As You Go (NGTX)"
      ],
      "defaultValue": "R80.10 - Bring Your Own License",
      "metadata": {
        "description": "Version of Check Point CloudGuard"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password"
      },
      "defaultValue": ""
    },
    "authenticationType": {
      "type": "string",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "defaultValue": "password",
      "metadata": {
        "description": "Authentication type"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Administrator SSH public key"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Check Point Cluster"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "sicKey": {
      "type": "securestring",
      "metadata": {
        "description": "One time key for Secure Internal Communication"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network"
      },
      "defaultValue": "vnet"
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the virtual network"
      },
      "defaultValue": "10.0.0.0/16"
    },
    "Subnet1Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the 1st subnet"
      },
      "defaultValue": "Frontend"
    },
    "Subnet1Prefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the 1st subnet"
      },
      "defaultValue": "10.0.1.0/24"
    },
    "Subnet1StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first available address on the 1st subnet"
      },
      "defaultValue": "10.0.1.10"
    },
    "Subnet2Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the 2nd subnet"
      },
      "defaultValue": "Backend"
    },
    "Subnet2Prefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the 2nd subnet"
      },
      "defaultValue": "10.0.2.0/24"
    },
    "Subnet2StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first available address on the 2nd subnet"
      },
      "defaultValue": "10.0.2.10"
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "Description": "Indicates whether the virtual network is new or existing"
      }
    },
    "virtualNetworkExistingRGName": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the existing virtual network"
      },
      "defaultValue": ""
    },
    "bootstrapScript": {
      "type": "string",
      "metadata": {
        "description": "Bootstrap script"
      },
      "defaultValue": ""
    },
    "allowDownloadFromUploadToCheckPoint": {
      "type": "string",
      "allowedValues": [
        "true",
        "false"
      ],
      "defaultValue": "true",
      "metadata": {
        "description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point"
      }
    },
    "additionalDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Amount of additional disk space (in GB)"
      },
      "minValue": 0,
      "maxValue": 3995
    },
    "diskType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The type of the OS disk. Premium is applicable only to DS machine sizes"
      },
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ]
    },
    "preview": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Deploy the staged image"
      },
      "allowedValues": [
        "",
        "-preview"
      ]
    },
    "role": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Role"
      }
    },
    "sourceImageVhdUri": {
      "type": "string",
      "defaultValue": "noCustomUri",
      "metadata": {
        "description": "The URI of the blob containing the development image"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      },
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    },
    "Check_PointTags": {
      "type": "object",
      "defaultValue": {
        "provider": "30DE18BC-F9F6-4F22-9D30-54B8E74CFD5F"
      }
    }
  },
  "variables": {
    "templateName": "cluster",
    "templateVersion": "20191118",
    "location": "[parameters('location')]",
    "offers": {
      "R80.10 - Bring Your Own License": "BYOL",
      "R80.10 - Pay As You Go (NGTP)": "NGTP-V2",
      "R80.10 - Pay As You Go (NGTX)": "NGTX"
    },
    "offer": "[variables('offers')[parameters('cloudGuardVersion')]]",
    "osVersions": {
      "R80.10 - Bring Your Own License": "R8010",
      "R80.10 - Pay As You Go (NGTP)": "R8010",
      "R80.10 - Pay As You Go (NGTX)": "R8010"
    },
    "isBlink": "[equals(variables('osVersion'), 'R8010')]",
    "osVersion": "[variables('osVersions')[parameters('cloudGuardVersion')]]",
    "computeApiVersion": "2017-03-30",
    "storageApiVersion": "2016-01-01",
    "networkApiVersion": "2016-06-01",
    "authorizationApiVersion": "2017-05-01",
    "deploymentsApiVersion": "2016-02-01",
    "storageAccountName": "[concat('bootdiag', uniqueString(resourceGroup().id, deployment().name))]",
    "storageAccountType": "Standard_LRS",
    "diskSizeGBR8010": 100,
    "diskSizeGB": "[add(parameters('additionalDiskSizeGB'), variables(concat('diskSizeGB', variables('osVersion'))))]",
    "customData": "[concat('#!/usr/bin/python /etc/cloud_config.py\n', '\n', 'installationType=\"', variables('installationType'), '\"', '\n', 'allowUploadDownload=\"', variables('allowUploadDownload'), '\"', '\n', 'osVersion=\"', variables('osVersion'), '\"', '\n', 'templateName=\"', variables('templateName'), '\"', '\n', 'isBlink=\"', variables('isBlink'), '\"', '\n', 'templateVersion=\"', variables('templateVersion'), '\"', '\n', 'bootstrapScript64=\"', variables('bootstrapScript64'), '\"', '\n', 'location=\"', variables('location'), '\"', '\n', 'sicKey=\"', variables('sicKey'), '\"', '\n', 'managementGUIClientNetwork=\"', variables('managementGUIClientNetwork'), '\"', '\n', 'location=\"', variables('location'), '\"', '\n', 'tenantId=\"', subscription().tenantId, '\"', '\n', 'virtualNetwork=\"', parameters('virtualNetworkName'), '\"', '\n', 'clusterName=\"', parameters('vmName'), '\"', '\n', 'externalPrivateAddresses=\"', variables('externalPrivateAddresses')[2], '\"', '\n')]",
    "imageOfferR8010": "check-point-vsec-r80-blink-v2",
    "imageOffer": "[concat(variables(concat('imageOffer', variables('osVersion'))), parameters('preview'))]",
    "imagePublisher": "checkpoint",
    "imageReferenceBYOL": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-byol",
      "version": "latest"
    },
    "imageReferenceNGTP": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp",
      "version": "latest"
    },
    "imageReferenceNGTP-V2": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp-v2",
      "version": "latest"
    },
    "imageReferenceNGTX": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtx",
      "version": "latest"
    },
    "imageReferenceMarketplace": "[variables(concat('imageReference', variables('offer')))]",
    "customImage": "customImage",
    "imageReferenceCustomUri": {
      "id": "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
    },
    "imageReference": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('imageReferenceMarketplace'), variables('imageReferenceCustomUri'))]",
    "nic1Name": "eth0",
    "nic2Name": "eth1",
    "lbId": "[resourceId('Microsoft.Network/loadBalancers', variables('lbName'))]",
    "lbName": "frontend-lb",
    "linuxConfigurationpassword": {},
    "linuxConfigurationsshPublicKey": {
      "disablePasswordAuthentication": "true",
      "ssh": {
        "publicKeys": [
          {
            "keyData": "[parameters('sshPublicKey')]",
            "path": "/home/notused/.ssh/authorized_keys"
          }
        ]
      }
    },
    "linuxConfiguration": "[variables(concat('linuxConfiguration', parameters('authenticationType')))]",
    "planBYOL": {
      "name": "sg-byol",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP": {
      "name": "sg-ngtp",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP-V2": {
      "name": "sg-ngtp-v2",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTX": {
      "name": "sg-ngtx",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "plan": "[variables(concat('plan', variables('offer')))]",
    "roleDefinitionId": "[if(equals(parameters('role'), 'Contributor'), concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c'), parameters('role'))]",
    "identity": "[if(empty(variables('roleDefinitionId')), json('null'), json('{\"type\": \"SystemAssigned\"}'))]",
    "externalPrivateAddresses": [
      "[parameters('Subnet1StartAddress')]",
      "[concat(split(parameters('Subnet1StartAddress'), '.')[0],'.', split(parameters('Subnet1StartAddress'), '.')[1],'.', split(parameters('Subnet1StartAddress'), '.')[2],'.', string(add(int(split(parameters('Subnet1StartAddress'), '.')[3]),1)))]",
      "[concat(split(parameters('Subnet1StartAddress'), '.')[0],'.', split(parameters('Subnet1StartAddress'), '.')[1],'.', split(parameters('Subnet1StartAddress'), '.')[2],'.', string(add(int(split(parameters('Subnet1StartAddress'), '.')[3]),2)))]"
    ],
    "Subnet2PrivateAddresses": [
      "[parameters('Subnet2StartAddress')]",
      "[concat(split(parameters('Subnet2StartAddress'), '.')[0],'.', split(parameters('Subnet2StartAddress'), '.')[1],'.', split(parameters('Subnet2StartAddress'), '.')[2],'.', string(add(int(split(parameters('Subnet2StartAddress'), '.')[3]),1)))]",
      "[concat(split(parameters('Subnet2StartAddress'), '.')[0],'.', split(parameters('Subnet2StartAddress'), '.')[1],'.', split(parameters('Subnet2StartAddress'), '.')[2],'.', string(add(int(split(parameters('Subnet2StartAddress'), '.')[3]),2)))]"
    ],
    "publicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('vmName'))]",
    "publicIPAddressIds": [
      "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '1'))]",
      "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('vmName'), '2'))]"
    ],
    "availabilitySetName": "[concat(parameters('vmName'), '-AvailabilitySet')]",
    "count": 2,
    "frontEndIPConfMember1Id": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd1')]",
    "frontEndIPConfMember2Id": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd2')]",
    "member1IPConfigId": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd1')]",
    "member2IPConfigId": "[concat(variables('lbId'), '/frontendIPConfigurations/LoadBalancerFrontEnd2')]",
    "bootstrapScript64": "[base64(parameters('bootstrapScript'))]",
    "allowUploadDownload": "[parameters('allowDownloadFromUploadToCheckPoint')]",
    "networkSetupURL": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vnet-', parameters('vnetNewOrExisting'), '.json', parameters('_artifactsLocationSasToken')))]",
    "sicKey": "[parameters('sicKey')]",
    "managementGUIClientNetwork": "",
    "installationType": "cluster"
  },
  "resources": [
    {
      "apiVersion": "2018-02-01",
      "name": "pid-02f0149c-45d1-561e-bd46-1121af3376e0",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "name": "networkSetup",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('deploymentsApiVersion')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('networkSetupURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "apiVersion": {
            "value": "[variables('networkApiVersion')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressPrefix": {
            "value": "[parameters('virtualNetworkAddressPrefix')]"
          },
          "Subnet1Name": {
            "value": "[parameters('Subnet1Name')]"
          },
          "Subnet1Prefix": {
            "value": "[parameters('Subnet1Prefix')]"
          },
          "Subnet1StartAddress": {
            "value": "[parameters('Subnet1StartAddress')]"
          },
          "Subnet2Name": {
            "value": "[parameters('Subnet2Name')]"
          },
          "Subnet2Prefix": {
            "value": "[parameters('Subnet2Prefix')]"
          },
          "Subnet2StartAddress": {
            "value": "[parameters('Subnet2StartAddress')]"
          },
          "vnetNewOrExisting": {
            "value": "[parameters('vnetNewOrExisting')]"
          },
          "virtualNetworkExistingRGName": {
            "value": "[parameters('virtualNetworkExistingRGName')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[variables('location')]",
      "name": "[concat(variables('availabilitySetName'))]",
      "properties": {
        "platformFaultDomainCount": 2
      },
      "sku": {
        "name": "Aligned"
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "name": "[parameters('vmName')]",
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', uniquestring(resourceGroup().id, deployment().name))]"
        }
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), copyIndex(1))]",
      "copy": {
        "name": "publicAddressCopy",
        "count": "[variables('count')]"
      },
      "properties": {
        "idleTimeoutInMinutes": 30,
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', copyIndex(1), '-', uniquestring(resourceGroup().id, deployment().name))]"
        }
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networkSetup')]",
        "[variables('publicIPAddressIds')[0]]",
        "[variables('publicIPAddressId')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), '1-', variables('nic1Name'))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "member-ip",
            "properties": {
              "primary": true,
              "privateIPAddress": "[variables('externalPrivateAddresses')[0]]",
              "privateIPAllocationMethod": "Static",
              "PublicIpAddress": {
                "Id": "[variables('publicIPAddressIds')[0]]"
              },
              "subnet": {
                "id": "[concat(reference('networkSetup').outputs.vnetId.value, '/subnets/', parameters('Subnet1Name'))]"
              }
            }
          },
          {
            "name": "cluster-vip",
            "properties": {
              "primary": false,
              "privateIPAddress": "[variables('externalPrivateAddresses')[2]]",
              "privateIPAllocationMethod": "Static",
              "PublicIpAddress": {
                "Id": "[variables('publicIPAddressId')]"
              },
              "subnet": {
                "id": "[concat(reference('networkSetup').outputs.vnetId.value, '/subnets/', parameters('Subnet1Name'))]"
              }
            }
          }
        ]
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networkSetup')]",
        "[variables('publicIPAddressIds')[1]]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), '2-', variables('nic1Name'))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "member-ip",
            "properties": {
              "primary": true,
              "privateIPAddress": "[variables('externalPrivateAddresses')[1]]",
              "privateIPAllocationMethod": "Static",
              "PublicIpAddress": {
                "Id": "[variables('publicIPAddressIds')[1]]"
              },
              "subnet": {
                "id": "[concat(reference('networkSetup').outputs.vnetId.value, '/subnets/', parameters('Subnet1Name'))]"
              }
            }
          }
        ]
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'networkSetup')]"
      ],
      "copy": {
        "name": "nic2Copy",
        "count": "[variables('count')]"
      },
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name'))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "member-ip",
            "properties": {
              "primary": true,
              "privateIPAddress": "[variables('Subnet2PrivateAddresses')[copyIndex()]]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[concat(reference('networkSetup').outputs.vnetId.value, '/subnets/', parameters('Subnet2Name'))]"
              }
            }
          }
        ]
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "condition": "[not(equals(parameters('sourceImageVhdUri'), 'noCustomUri'))]",
      "type": "Microsoft.Compute/images",
      "apiVersion": "2017-12-01",
      "name": "[variables('customImage')]",
      "location": "[variables('location')]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "osState": "Generalized",
            "blobUri": "[parameters('sourceImageVhdUri')]",
            "storageAccountType": "Standard_LRS"
          }
        }
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic1Name')))]",
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name')))]",
        "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(parameters('vmName'), copyIndex(1))]",
      "copy": {
        "name": "virtualMachineCopy",
        "count": "[variables('count')]"
      },
      "plan": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('plan'), json('null'))]",
      "identity": "[variables('identity')]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), variables('storageApiVersion')).primaryEndpoints.blob]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic1Name')))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('vmName'), copyIndex(1), '-', variables('nic2Name')))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "notused",
          "computername": "[concat(toLower(parameters('vmName')), copyIndex(1))]",
          "customData": "[base64(variables('customData'))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": "[variables('diskSizeGB')]",
            "name": "[concat(parameters('vmName'), copyIndex(1))]",
            "managedDisk": {
              "storageAccountType": "[parameters('diskType')]"
            }
          }
        }
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    },
    {
      "condition": "[not(empty(variables('roleDefinitionId')))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "[variables('authorizationApiVersion')]",
      "name": "[guid(resourceGroup().id, concat(parameters('vmName'), copyIndex(1)))]",
      "copy": {
        "name": "virtualMachineCopy",
        "count": "[variables('count')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', concat(parameters('vmName'), copyIndex(1)))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('roleDefinitionId')]",
        "scope": "[resourceGroup().id]",
        "principalId": "[reference(concat('Microsoft.Compute/virtualMachines/', concat(parameters('vmName'), copyIndex(1))), variables('computeApiVersion'), 'Full').identity.principalId]"
      },
      "tags": {
        "provider": "[toUpper(parameters('Check_PointTags').provider)]"
      }
    }
  ],
  "outputs": {
    "ClusterIPAddr": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressId')).IpAddress]"
    },
    "ClusterFQDN": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressId')).dnsSettings.fqdn]"
    },
    "Member1IPAddr": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressIds')[0]).IpAddress]"
    },
    "Member1FQDN": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressIds')[0]).dnsSettings.fqdn]"
    },
    "Member2IPAddr": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressIds')[1]).IpAddress]"
    },
    "Member2FQDN": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressIds')[1]).dnsSettings.fqdn]"
    }
  }
}
