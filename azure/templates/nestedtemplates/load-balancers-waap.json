{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "deploymentMode": {
      "type": "string"
    },
    "location": {
      "type": "string"
    },
    "vmName": {
      "type": "string"
    },
    "appLoadDistribution": {
      "type": "string"
    },
    "subnet1Id": {
      "type": "string"
    },
    "upgrading": {
      "type": "bool"
    },
    "elbResourceId": {
      "type": "string"
    },
    "elbTargetBEAddressPoolName": {
      "type": "string"
    },
    "ilbResourceId": {
      "type": "string"
    },
    "ilbTargetBEAddressPoolName": {
      "type": "string"
	}
  },
  "variables": {
    "deployELB": "[equals(parameters('deploymentMode'),'ELBOnly')]",
    "deployILB": "[equals(parameters('deploymentMode'),'ILBOnly')]",
    "appName": "[concat(parameters('vmName'), '-app-1')]",
    "appAddressName": "[variables('appName')]",
    "appAddressId": "[resourceId('Microsoft.Network/publicIPAddresses/', variables('appAddressName'))]",
    "appFEName": "[variables('appName')]",
    "elbName": "External-lb",
    "ilbName": "Internal-lb",
    "elbID": "[if(parameters('upgrading'), parameters('elBResourceId'), resourceId('Microsoft.Network/loadBalancers', variables('elbName')))]",
    "elbBEAddressPool": "[concat(variables('elbName'), '-pool')]",
    "elbBEAddressPoolName": "[if(parameters('upgrading'), parameters('elbTargetBEAddressPoolName'), variables('elbBEAddressPool'))]",
    "appFrontEndProtocol": "tcp",
    "appHealthProtocol": "tcp",
    "lbHealthPort": 8117,
    "ilbID": "[if(parameters('upgrading'), parameters('ilbResourceId'), resourceId('Microsoft.Network/loadBalancers', variables('ilbName')))]",
    "ilbBEAddressPool": "[concat(variables('ilbName'), '-pool')]",
    "ilbBEAddressPoolName": "[if(parameters('upgrading'), parameters('ilbTargetBEAddressPoolName'), variables('ilbBEAddressPool'))]",
    "ilbBEAddressPoolProperties": [
      {
        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'), variables('ilbBEAddressPoolName'))]"
      }
    ],
    "elbBEAddressPoolProperties": [
      {
        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('elbName'), variables('elbBEAddressPoolName'))]"
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "condition": "[and(variables('deployELB'), not(parameters('upgrading')))]",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "name": "[variables('appAddressName')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(toLower(parameters('vmName')), '-', uniquestring(resourceGroup().id, deployment().name))]"
        }
	  }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "condition": "[and(variables('deployELB'), not(parameters('upgrading')))]",
      "apiVersion": "2020-06-01",
      "name": "[variables('elbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[variables('appAddressId')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('appFEName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses/', variables('appAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('elbBEAddressPool')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[concat(parameters('vmName'), '80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('elbName'), variables('appFEName'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('elbName'), variables('elbBEAddressPoolName'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('elbName'), variables('elbName'))]"
              },
              "protocol": "[variables('appFrontEndProtocol')]",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "loadDistribution": "[parameters('appLoadDistribution')]"
            }
          },
          {
            "name": "[concat(parameters('vmName'), '443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('elbName'), variables('appFEName'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('elbName'), variables('elbBEAddressPoolName'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('elbName'), variables('elbName'))]"
              },
              "protocol": "[variables('appFrontEndProtocol')]",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "loadDistribution": "[parameters('appLoadDistribution')]"
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('elbName')]",
            "properties": {
              "protocol": "[variables('appHealthProtocol')]",
              "port": "[variables('lbHealthPort')]",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
	  }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "condition": "[and(variables('deployILB'), not(parameters('upgrading')))]",
      "apiVersion": "2020-06-01",
      "name": "[variables('ilbName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('ilbName')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[parameters('subnet1ID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('ilbBEAddressPool')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "[concat(parameters('vmName'), '80')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('ilbName'), variables('ilbName'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'), variables('ilbBEAddressPoolName'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'), variables('ilbName'))]"
              },
              "protocol": "[variables('appFrontEndProtocol')]",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "loadDistribution": "[parameters('appLoadDistribution')]"
            }
          },
          {
            "name": "[concat(parameters('vmName'), '443')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('ilbName'),  variables('ilbName'))]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('ilbName'), variables('ilbBEAddressPoolName'))]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('ilbName'), variables('ilbName'))]"
              },
              "protocol": "[variables('appFrontEndProtocol')]",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "loadDistribution": "[parameters('appLoadDistribution')]"
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('ilbName')]",
            "properties": {
              "protocol": "[variables('appHealthProtocol')]",
              "port": "[variables('lbHealthPort')]",
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ]
	  }
    }
  ],
  "outputs": {
    "appAddressId": {
      "value": "[if(and(variables('deployELB'), not(parameters('upgrading'))), resourceId('Microsoft.Network/publicIPAddresses', variables('appAddressName')), '')]",
      "type": "string"
    },
    "elbId": {
      "value": "[if(variables('deployELB'), variables('elbId'), '')]",
      "type": "string"
    },
    "probeName": {
      "value": "[if(variables('deployELB'), variables('elbName'), variables('ilbName'))]",
      "type": "string"
    },
    "appHealthProtocol": {
      "value": "[variables('appHealthProtocol')]",
      "type": "string"
    },
    "lbHealthPort": {
      "value": "[variables('lbHealthPort')]",
      "type": "int"
    },
    "ilbId": {
      "value": "[if(variables('deployILB'), variables('ilbId'), '')]",
      "type": "string"
    },
    "ilbBEAddressPoolProperties": {
      "value": "[variables('ilbBEAddressPoolProperties')]",
      "type": "array"
    },
    "elbBEAddressPoolProperties": {
      "value": "[variables('elbBEAddressPoolProperties')]",
      "type": "array"
    },
    "ApplicationAddress": {
      "value": "[if(and(variables('deployELB'), not(parameters('upgrading'))), reference(variables('appAddressId'), '2018-11-01').IpAddress, 'no public ip')]",
      "type": "string"
    },
    "ApplicationFQDN": {
      "value": "[if(and(variables('deployELB'), not(parameters('upgrading'))), reference(variables('appAddressId'), '2018-11-01').dnsSettings.fqdn, 'no public ip')]",
      "type": "string"
    }
  }
}
