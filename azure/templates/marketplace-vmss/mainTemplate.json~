{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "subscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "Subscription ID."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment location"
      },
      "defaultValue": "[resourceGroup().location]"
    },
    "cloudGuardVersion": {
      "type": "string",
      "allowedValues": [
        "R80.40 - Bring Your Own License",
        "R80.40 - Pay As You Go (NGTP)",
        "R80.40 - Pay As You Go (NGTX)",
        "R81 - Bring Your Own License",
        "R81 - Pay As You Go (NGTP)",
        "R81 - Pay As You Go (NGTX)",
        "R81.10 - Bring Your Own License",
        "R81.10 - Pay As You Go (NGTP)",
        "R81.10 - Pay As You Go (NGTX)",
        "R81.20 - Bring Your Own License",
        "R81.20 - Pay As You Go (NGTP)",
        "R81.20 - Pay As You Go (NGTX)"
      ],
      "defaultValue": "R81.10 - Bring Your Own License",
      "metadata": {
        "description": "Version of Check Point CloudGuard"
      }
    },
    "instanceCount": {
      "defaultValue": "2",
      "type": "string",
      "metadata": {
        "description": "Number of VM instances"
      }
    },
    "maxInstanceCount": {
      "defaultValue": "10",
      "type": "string",
      "metadata": {
        "description": "Maximum number of VM instances"
      }
    },
    "managementServer": {
      "type": "string",
      "metadata": {
        "description": "The name of the management server as it appears in the configuration file"
      }
    },
    "configurationTemplate": {
      "type": "string",
      "metadata": {
        "description": "A name of a template as it appears in the configuration file"
      }
    },
    "adminEmail": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Email address to notify if there are any scaling operations"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password"
      },
      "defaultValue": ""
    },
    "authenticationType": {
      "type": "string",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "defaultValue": "password",
      "metadata": {
        "description": "Authentication type"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Administrator SSH public key"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Check Point Security Gateway scale set"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "adminShell": {
      "type": "string",
      "defaultValue": "/etc/cli.sh",
      "allowedValues": [
        "/etc/cli.sh",
        "/bin/bash",
        "/bin/csh",
        "/bin/tcsh"
      ],
      "metadata": {
        "Description": "The default shell for the admin user"
      }
    },
    "sicKey": {
      "type": "securestring",
      "metadata": {
        "description": "One time key for Secure Internal Communication"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network"
      },
      "defaultValue": "[concat(resourceGroup().name, '-vnet')]"
    },
    "upgrading": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "no",
        "yes"
      ],
      "metadata": {
        "Description": "Indicates whether the user in upgrading the CloudGuard VMSS solution"
      }
    },
    "floatingIP": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "no",
        "yes"
      ],
      "metadata": {
        "description": "Deploy the Load Balancers with floating IP"
      }
    },
    "instanceLevelPublicIP": {
      "type": "string",
      "allowedValues": [
        "no",
        "yes"
      ],
      "defaultValue": "no",
      "metadata": {
        "description": "Deploy the VMSS with instance level Public IP address"
      }
    },
    "publicIPPrefix": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "no",
        "yes"
      ],
      "metadata": {
        "description": "Use public IP prefix."
      }
    },
    "createNewIPPrefix": {
      "type": "string",
      "defaultValue": "no",
      "allowedValues": [
        "no",
        "yes"
      ],
      "metadata": {
        "description": "Create new IP prefix or use an existing one."
      }
    },
    "IPv4Length": {
      "type": "string",
      "defaultValue": "/31 (2 addresses)",
      "allowedValues": [
        "/28 (16 addresses)",
        "/29 (8 addresses)",
        "/30 (4 addresses)",
        "/31 (2 addresses)"
      ],
      "metadata": {
        "description": "Choose the IP prefix length for IP v4."
      }
    },
    "ipPrefixExistingResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource id of the existing IP prefix."
      },
      "defaultValue": ""
    },
    "lbsTargetRGName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Target Load Balancers Resource Group."
      },
      "defaultValue": ""
    },
    "elbResourceId": {
      "type": "string",
      "metadata": {
        "description": "The Resource ID of the Target External Load Balancer."
      },
      "defaultValue": ""
    },
    "elbTargetBEAddressPoolName": {
      "type": "string",
      "metadata": {
        "description": "The name of the new Target External Load Balancer's Backend Pool."
      },
      "defaultValue": ""
    },
    "ilbResourceId": {
      "type": "string",
      "metadata": {
        "description": "The Resource ID of the Target Internal Load Balancer."
      },
      "defaultValue": ""
    },
    "ilbTargetBEAddressPoolName": {
      "type": "string",
      "metadata": {
        "description": "The name of the new Target Internal Load Balancer's Backend Pool."
      },
      "defaultValue": ""
    },
    "virtualNetworkAddressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "The address prefixes of the virtual network"
      },
      "defaultValue": [
        "10.0.0.0/16"
      ]
    },
    "subnet1Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the frontend subnet"
      },
      "defaultValue": "Frontend"
    },
    "subnet1Prefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the frontend subnet"
      },
      "defaultValue": "10.0.1.0/24"
    },
    "subnet2Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the backend subnet"
      },
      "defaultValue": "Backend"
    },
    "subnet2Prefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the backend subnet"
      },
      "defaultValue": "10.0.2.0/24"
    },
    "subnet2StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first available address on the 2nd subnet"
      },
      "defaultValue": "10.0.2.4"
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "Description": "Indicates whether the virtual network is new or existing"
      }
    },
    "virtualNetworkExistingRGName": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the existing virtual network"
      },
      "defaultValue": "[resourceGroup().name]"
    },
    "bootstrapScript": {
      "type": "string",
      "metadata": {
        "description": "Bootstrap script"
      },
      "defaultValue": ""
    },
    "allowDownloadFromUploadToCheckPoint": {
      "type": "string",
      "allowedValues": [
        "true",
        "false"
      ],
      "defaultValue": "true",
      "metadata": {
        "description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point"
      }
    },
    "mgmtInterfaceOpt1": {
      "type": "string",
      "allowedValues": [
        "eth0-public",
        "eth0-private",
        "eth1-private"
      ],
      "defaultValue": "eth1-private",
      "metadata": {
        "description": "Manage the Gateways in the Scale Set via the instance's external (eth0) or internal (eth1) NIC's private IP address."
      }
    },
    "mgmtInterfaceOpt2": {
      "type": "string",
      "allowedValues": [
        "eth0-private",
        "eth1-private"
      ],
      "defaultValue": "eth1-private",
      "metadata": {
        "description": "Manage the Gateways in the Scale Set via the instance's external (eth0) or internal (eth1) NIC's private IP address."
      }
    },
    "mgmtIPaddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The IP address used to manage the VMSS instances."
      }
    },
    "diskType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The type of the OS disk. Premium is applicable only to DS machine sizes"
      },
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ]
    },
    "appLoadDistribution": {
      "type": "string",
      "allowedValues": [
        "Default",
        "SourceIP",
        "SourceIPProtocol"
      ],
      "defaultValue": "Default",
      "metadata": {
        "description": "The External Load Balancer distribution method"
      }
    },
    "ilbLoadDistribution": {
      "type": "string",
      "allowedValues": [
        "Default",
        "SourceIP",
        "SourceIPProtocol"
      ],
      "defaultValue": "Default",
      "metadata": {
        "description": "The Internal Load Balancer distribution method"
      }
    },
    "deploymentMode": {
      "type": "string",
      "allowedValues": [
        "Standard",
        "ILBOnly",
        "ELBOnly"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "Solution deployment architecture."
      }
    },
    "sourceImageVhdUri": {
      "type": "string",
      "defaultValue": "noCustomUri",
      "metadata": {
        "description": "The URI of the blob containing the development image"
      }
    },
    "availabilityZonesNum": {
      "type": "int",
      "allowedValues": [
        0,
        1,
        2,
        3
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "The number of availability zones"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "Use the following URI when deploying a custom template: https://raw.githubusercontent.com/CheckPointSW/CloudGuardIaaS/master/azure/templates/"
      },
      "defaultValue": "[deployment().properties.templateLink.uri]"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    },
    "remoteAccessVpn": {
      "type": "string",
      "allowedValues": [
        "no",
        "yes"
      ],
      "defaultValue": "no",
      "metadata": {
        "Description": "Indicates whether the remote access VPN will be used"
      }
    },
    "dnsZoneResourceId": {
      "type": "string",
      "defaultValue": "Define a DNS Zone Resource ID only in case Remote Access VPN usage and DNS Zone(domain) is already exists",
      "metadata": {
        "description": "DNS Zone DNS Zone Resource ID"
      }
    },
    "dnsZoneRecordSetName": {
      "type": "string",
      "defaultValue": "remote-access-instances",
      "metadata": {
        "description": "DNS Zone Record Set name"
      }
    },
    "customMetrics": {
      "type": "string",
      "allowedValues": [
        "no",
        "yes"
      ],
      "defaultValue": "yes",
      "metadata": {
        "Description": "Indicates whether Custom Metrics will be used for VMSS Scaling policy and VM monitoring"
      }
    },
    "rbacGuid": {
      "type": "string",
      "defaultValue": "[newGuid()]"
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {}
    },
    "deployNewNSG": {
      "type": "bool",
      "defaultValue": true
    },
    "UseExistingNSG": {
      "type": "bool",
      "defaultValue": false
    },
    "ExistingNSG": {
      "type": "object",
      "defaultValue": {}
    },
    "NewNsgName": {
      "type": "string",
      "defaultValue": "[concat(parameters('vmName'),'-nsg')]"
    }
  },
  "variables": {
    "resourceGroup": "[resourceGroup()]",
    "resourceGroupName": "[resourceGroup().name]",
    "templateName": "vmss-v2",
    "templateVersion": "20230109",
    "location": "[parameters('location')]",
    "offers": {
      "R80.40 - Bring Your Own License": "BYOL",
      "R80.40 - Pay As You Go (NGTP)": "NGTP",
      "R80.40 - Pay As You Go (NGTX)": "NGTX",
      "R81 - Bring Your Own License": "BYOL",
      "R81 - Pay As You Go (NGTP)": "NGTP",
      "R81 - Pay As You Go (NGTX)": "NGTX",
      "R81.10 - Bring Your Own License": "BYOL",
      "R81.10 - Pay As You Go (NGTP)": "NGTP",
      "R81.10 - Pay As You Go (NGTX)": "NGTX",
      "R81.20 - Bring Your Own License": "BYOL",
      "R81.20 - Pay As You Go (NGTP)": "NGTP",
      "R81.20 - Pay As You Go (NGTX)": "NGTX"
    },
    "offer": "[variables('offers')[parameters('cloudGuardVersion')]]",
    "osVersions": {
      "R80.40 - Bring Your Own License": "R8040",
      "R80.40 - Pay As You Go (NGTP)": "R8040",
      "R80.40 - Pay As You Go (NGTX)": "R8040",
      "R81 - Bring Your Own License": "R81",
      "R81 - Pay As You Go (NGTP)": "R81",
      "R81 - Pay As You Go (NGTX)": "R81",
      "R81.10 - Bring Your Own License": "R8110",
      "R81.10 - Pay As You Go (NGTP)": "R8110",
      "R81.10 - Pay As You Go (NGTX)": "R8110",
      "R81.20 - Bring Your Own License": "R8120",
      "R81.20 - Pay As You Go (NGTP)": "R8120",
      "R81.20 - Pay As You Go (NGTX)": "R8120"
    },
    "osVersion": "[variables('osVersions')[parameters('cloudGuardVersion')]]",
    "isBlink": true,
    "subnet2Name": "[parameters('subnet2Name')]",
    "storageAccountName": "[concat('bootdiag', uniqueString(variables('resourceGroup').id, deployment().name))]",
    "storageAccountType": "Standard_LRS",
    "enableFloatingIP": "[equals(parameters('floatingIP'), 'yes')]",
    "customData": "[concat('#!/usr/bin/python3 /etc/cloud_config.py\n', '\n', 'installationType=\"', variables('installationType'), '\"', '\n', 'allowUploadDownload=\"', variables('allowUploadDownload'), '\"', '\n', 'osVersion=\"', variables('osVersion'), '\"', '\n', 'templateName=\"', variables('templateName'), '\"', '\n', 'isBlink=\"', variables('isBlink'), '\"', '\n', 'templateVersion=\"', variables('templateVersion'), '\"', '\n', 'bootstrapScript64=\"', variables('bootstrapScript64'), '\"', '\n', 'location=\"', variables('location'), '\"', '\n', 'sicKey=\"', variables('sicKey'), '\"', '\n', 'customMetrics=\"', variables('customMetrics'), '\"', '\n', 'adminShell=\"', parameters('adminShell'), '\"', '\n')]",
    "imageOffer": "[concat('check-point-cg-', toLower(variables('osVersion')))]",
    "imagePublisher": "checkpoint",
    "imageReferenceBYOL": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-byol",
      "version": "latest"
    },
    "imageReferenceNGTP": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp",
      "version": "latest"
    },
    "imageReferenceNGTP-V2": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp-v2",
      "version": "latest"
    },
    "imageReferenceNGTX": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtx",
      "version": "latest"
    },
    "imageReferenceNGTX-V2": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtx-v2",
      "version": "latest"
    },
    "imageReferenceMarketplace": "[if(equals(variables('offer'), 'BYOL'), variables('imageReferenceBYOL'), if(equals(variables('offer'), 'NGTP'), variables('imageReferenceNGTP'), if(equals(variables('offer'), 'NGTP-V2'), variables('imageReferenceNGTP-V2'), if(equals(variables('offer'), 'NGTX'), variables('imageReferenceNGTX'), if(equals(variables('offer'), 'NGTX-V2'), variables('imageReferenceNGTX-V2'), json('null'))))))]",
    "customImage": "customImage",
    "imageReferenceCustomUri": {
      "id": "[resourceId('Microsoft.Compute/images', variables('customImage'))]"
    },
    "imageReference": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('imageReferenceMarketplace'), variables('imageReferenceCustomUri'))]",
    "linuxConfigurationpassword": {
      "disablePasswordAuthentication": "false"
    },
    "linuxConfigurationsshPublicKey": {
      "disablePasswordAuthentication": "true",
      "ssh": {
        "publicKeys": [
          {
            "keyData": "[parameters('sshPublicKey')]",
            "path": "/home/notused/.ssh/authorized_keys"
          }
        ]
      }
    },
    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'),  variables('linuxConfigurationpassword'), variables('linuxConfigurationsshPublicKey'))]",
    "planBYOL": {
      "name": "sg-byol",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP": {
      "name": "sg-ngtp",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP-V2": {
      "name": "sg-ngtp-v2",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTX": {
      "name": "sg-ngtx",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTX-V2": {
      "name": "sg-ngtx-v2",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "plan": "[if(equals(variables('offer'), 'BYOL') , variables('planBYOL'), if(equals(variables('offer'), 'NGTP'), variables('planNGTP'), if(equals(variables('offer'), 'NGTP-V2'), variables('planNGTP-V2'), if(equals(variables('offer'), 'NGTX'), variables('planNGTX'), if(equals(variables('offer'), 'NGTX-V2'), variables('planNGTX-V2'), json('null'))))))]",
    "vmssID": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmName'))]",
    "bootstrapScript64": "[base64(parameters('bootstrapScript'))]",
    "allowUploadDownload": "[parameters('allowDownloadFromUploadToCheckPoint')]",
    "sicKey": "[parameters('sicKey')]",
    "installationType": "vmss",
    "upgrading": "[equals(parameters('upgrading'), 'yes')]",
    "networkSetupURL": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vnet-2-subnet-ha-', parameters('vnetNewOrExisting'), '.json', parameters('_artifactsLocationSasToken')))]",
    "loadBalacerSetupURL": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/load-balancers.json', parameters('_artifactsLocationSasToken')))]",
    "azureFunctionSetupURL": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/azure-func-sami.json', parameters('_artifactsLocationSasToken')))]",
    "lbsTargetRGName": "[parameters('lbsTargetRGName')]",
    "lbRGName": "[if(variables('upgrading'), variables('lbsTargetRGName'), resourceGroup().name)]",
    "loadBalancerSetupId": "[resourceId(variables('lbRGName'), 'Microsoft.Resources/deployments', 'loadBalancerSetup')]",
    "deployNewVnet": "[equals(parameters('vnetNewOrExisting'), 'new')]",
    "vnetRGName": "[if(variables('deployNewVnet'), variables('resourceGroupName'), parameters('virtualNetworkExistingRGName'))]",
    "vnetID": "[if(variables('deployNewVnet'), resourceId(variables('vnetRGName'), 'Microsoft.Resources/deployments', 'networkNewSetup'), resourceId(variables('vnetRGName'), 'Microsoft.Resources/deployments', 'networkExistingSetup'))]",
    "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
    "customImageId": "[variables('imageReferenceCustomUri').id]",
    "availabilityZonesLocations": [
      "brazilsouth",
      "canadacentral",
      "centralus",
      "eastus",
      "eastus2",
      "southcentralus",
      "usgovvirginia",
      "westus2",
      "westus3",
      "francecentral",
      "germanywestcentral",
      "northeurope",
      "norwayeast",
      "uksouth",
      "westeurope",
      "swedencentral",
      "switzerlandnorth",
      "qatarcentral",
      "uaenorth",
      "southafricanorth",
      "australiaeast",
      "centralindia",
      "japaneast",
      "koreacentral",
      "southeastasia",
      "eastasia"
    ],
    "availabilityZonesProperty": "[range(1, parameters('availabilityZonesNum'))]",
    "mgmtInterface": "[if(equals(parameters('instanceLevelPublicIP'), 'yes'), parameters('mgmtInterfaceOpt1'), parameters('mgmtInterfaceOpt2'))]",
    "mgmtIpAddressType": "[split(variables('mgmtInterface'), '-')[1]]",
    "mgmtInterfaceName": "[split(variables('mgmtInterface'), '-')[0]]",
    "mgmtIPaddress": "[if(equals(variables('mgmtInterfaceName'), 'eth0'), parameters('mgmtIPaddress'), '')]",
    "commomTags": {
      "x-chkp-management": "[parameters('managementServer')]",
      "x-chkp-template": "[parameters('configurationTemplate')]",
      "x-chkp-ip-address": "[variables('mgmtIpAddressType')]",
      "x-chkp-management-interface": "[variables('mgmtInterfaceName')]",
      "x-chkp-topology": "eth0:external,eth1:internal",
      "x-chkp-anti-spoofing": "eth0:false,eth1:false",
      "x-chkp-srcImageUri": "[parameters('sourceImageVhdUri')]"
    },
    "uniqueTags": {
      "x-chkp-management-address": "[variables('mgmtIPaddress')]"
    },
    "vmssTags": "[if(equals(variables('mgmtIPaddress'), ''), variables('commomTags'), union(variables('commomTags'), variables('uniqueTags')))]",
    "dnsZoneResourceId": "[parameters('dnsZoneResourceId')]",
    "dnsZoneRecordSetName": "[parameters('dnsZoneRecordSetName')]",
    "numberOfRecordSetEntries": "20",
    "customMetrics": "[parameters('customMetrics')]",
    "monitoringMetricsPublisher": "[concat('/subscriptions/', parameters('subscriptionId'), '/providers/Microsoft.Authorization/roleDefinitions/', '3913510d-42f4-4e42-8a64-420c390055eb')]",
    "identity": "[json('{\"type\": \"SystemAssigned\"}')]",
    "IPv4Lengths": {
      "/28 (16 addresses)": "28",
      "/29 (8 addresses)": "29",
      "/30 (4 addresses)": "30",
      "/31 (2 addresses)": "31"
    },
    "ipPrefixNewName": "[concat(parameters('vmName'), '-ipprefix')]",
    "ipPrefixExistingResourceId": "[if(equals(parameters('publicIPPrefix'), 'yes'), parameters('ipPrefixExistingResourceId'), json('null'))]",
    "ipPrefixId": "[resourceId('Microsoft.Network/publicipprefixes',variables('ipPrefixNewName'))]",
    "publicIPPrefixId": "[if(equals(parameters('publicIPPrefix'), 'yes'), variables('ipPrefixId'), json('null'))]",
    "usePublicIPPrefix": "[if(equals(parameters('createNewIPPrefix'),'yes'), variables('publicIPPrefixId'), variables('ipPrefixExistingResourceId'))]",
    "publicIPPropertiesWithPrefix": {
      "name": "instancePublicIP",
      "properties": {
        "idleTimeoutInMinutes": 15,
        "PublicIpPrefix": {
          "Id": "[if(equals(parameters('publicIPPrefix'), 'yes'), variables('usePublicIPPrefix'), json('null'))]"
        }
      }
    },
    "publicIPPropertiesWithoutPrefix": {
      "name": "instancePublicIP",
      "properties": {
        "idleTimeoutInMinutes": 15
      }
    },
    "publicIPPrefixLength": "[variables('IPv4Lengths')[parameters('IPv4Length')]]",
    "useIpPrefix": "[if(equals(parameters('publicIPPrefix'), 'yes'), variables('publicIPPropertiesWithPrefix'), variables('publicIPPropertiesWithoutPrefix'))]",
    "NewNsgReference": {
      "id": "[resourceId(variables('vnetRGName'),'Microsoft.Network/networkSecurityGroups', parameters('NewNsgName'))]"
    }
  },
  "resources": [
    {
      "condition": "[and(equals(parameters('createNewIPPrefix'), 'yes'), equals(parameters('publicIPPrefix'), 'yes'))]",
      "apiVersion": "2020-06-01",
      "type": "Microsoft.Network/publicipprefixes",
      "name": "[variables('ipPrefixNewName')]",
      "location": "[variables('location')]",
      "properties": {
        "prefixLength": "[variables('publicIPPrefixLength')]",
        "publicIPAddressVersion": "IPv4"
      },
      "sku": {
        "name": "Standard",
        "tier": "Regional"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicipprefixes'), parameters('tagsByResource')['Microsoft.Network/publicipprefixes'], json('{}')) ]"
    },
    {
      "apiVersion": "2020-06-01",
      "name": "pid-6f13b00a-7546-4ab2-be9f-c66815cc6c8b-partnercenter",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "condition": "[equals(variables('customMetrics'), 'yes')]",
      "apiVersion": "2020-04-01-preview",
      "type": "Microsoft.Authorization/roleAssignments",
      "name": "[parameters('rbacGuid')]",
      "properties": {
        "roleDefinitionId": "[variables('monitoringMetricsPublisher')]",
        "principalId": "[reference(variables('vmssID'), '2021-07-01', 'Full').identity.principalId]",
        "scope": "[resourceGroup().id]"
      },
      "dependsOn": [
        "[variables('vmssID')]"
      ],
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Authorization/roleAssignments'), parameters('tagsByResource')['Microsoft.Authorization/roleAssignments'], json('{}')) ]"
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "name": "networkNewSetup",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "resourceGroup": "[variables('vnetRGName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('networkSetupURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkAddressPrefixes": {
            "value": "[parameters('virtualNetworkAddressPrefixes')]"
          },
          "subnet1Name": {
            "value": "[parameters('subnet1Name')]"
          },
          "subnet1Prefix": {
            "value": "[parameters('subnet1Prefix')]"
          },
          "subnet2Name": {
            "value": "[parameters('subnet2Name')]"
          },
          "subnet2Prefix": {
            "value": "[parameters('subnet2Prefix')]"
          },
          "vmName": {
            "value": "[parameters('vmName')]"
          },
          "deployNsg": {
            "value": "[parameters('deployNewNSG')]"
          },
          "NewNsgName": {
            "value": "[parameters('NewNsgName')]"
          },
          "tagsByResource": {
            "value": "[parameters('tagsByResource')]"
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'existing')]",
      "name": "networkExistingSetup",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "resourceGroup": "[variables('vnetRGName')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('networkSetupURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkExistingRGName": {
            "value": "[variables('vnetRGName')]"
          },
          "vmName": {
            "value": "[parameters('vmName')]"
          },
          "deployNsg": {
            "value": "[parameters('deployNewNSG')]"
          },
          "NewNsgName": {
            "value": "[parameters('NewNsgName')]"
          },
          "tagsByResource": {
            "value": "[parameters('tagsByResource')]"
          }
        }
      }
    },
    {
      "condition": "[and(equals(parameters('remoteAccessVpn'), 'yes'),or(contains(parameters('cloudGuardVersion'),'R80.40'),contains(parameters('cloudGuardVersion'),'R81')))]",
      "name": "azureFunctionSetup",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-06-01",
      "resourceGroup": "[resourceGroup().name]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('azureFunctionSetupURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "dnsZoneResourceId": {
            "value": "[variables('dnsZoneResourceId')]"
          },
          "dnsZoneRecordSetName": {
            "value": "[variables('dnsZoneRecordSetName')]"
          },
          "numberOfRecordSetEntries": {
            "value": "[variables('numberOfRecordSetEntries')]"
          },
          "vmssResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "vmssName": {
            "value": "[parameters('vmName')]"
          },
          "tagsByResource": {
            "value": "[parameters('tagsByResource')]"
          }
        }
      }
    },
    {
      "name": "loadBalancerSetup",
      "type": "Microsoft.Resources/deployments",
      "resourceGroup": "[variables('lbRGName')]",
      "apiVersion": "2020-06-01",
      "dependsOn": [
        "[variables('vnetID')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('loadBalacerSetupURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "deploymentMode": {
            "value": "[parameters('deploymentMode')]"
          },
          "location": {
            "value": "[variables('location')]"
          },
          "vmName": {
            "value": "[parameters('vmName')]"
          },
          "appLoadDistribution": {
            "value": "[parameters('appLoadDistribution')]"
          },
          "subnet2StartAddress": {
            "value": "[parameters('subnet2StartAddress')]"
          },
          "subnet2Id": {
            "value": "[resourceId(variables('vnetRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('subnet2Name'))]"
          },
          "ilbLoadDistribution": {
            "value": "[parameters('ilbLoadDistribution')]"
          },
          "elbResourceId": {
            "value": "[parameters('elbResourceId')]"
          },
          "elbTargetBEAddressPoolName": {
            "value": "[parameters('elbTargetBEAddressPoolName')]"
          },
          "ilbResourceId": {
            "value": "[parameters('ilbResourceId')]"
          },
          "ilbTargetBEAddressPoolName": {
            "value": "[parameters('ilbTargetBEAddressPoolName')]"
          },
          "upgrading": {
            "value": "[variables('upgrading')]"
          },
          "floatingIp": {
            "value": "[variables('enableFloatingIP')]"
          },
          "tagsByResource": {
            "value": "[parameters('tagsByResource')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2021-04-01",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false,
        "minimumTlsVersion": "TLS1_2"
      },
      "location": "[variables('location')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Storage/storageAccounts'), parameters('tagsByResource')['Microsoft.Storage/storageAccounts'], json('{}')) ]"
    },
    {
      "condition": "[not(equals(parameters('sourceImageVhdUri'), 'noCustomUri'))]",
      "type": "Microsoft.Compute/images",
      "apiVersion": "2020-06-01",
      "name": "[variables('customImage')]",
      "location": "[variables('resourceGroup').location]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "osState": "Generalized",
            "blobUri": "[parameters('sourceImageVhdUri')]",
            "storageAccountType": "Standard_LRS"
          }
        },
        "hyperVGeneration": "V1"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/images'), parameters('tagsByResource')['Microsoft.Compute/images'], json('{}')) ]"
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "apiVersion": "2021-07-01",
      "name": "[parameters('vmName')]",
      "location": "[variables('location')]",
      "identity": "[if(equals(variables('customMetrics'), 'yes'), variables('identity'), json('null'))]",
      "zones": "[if(and(contains(variables('availabilityZonesLocations'), variables('location')), greater(parameters('availabilityZonesNum'), 0)), variables('availabilityZonesProperty'), json('null'))]",
      "tags": "[union(variables('vmssTags'),if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachineScaleSets'), parameters('tagsByResource')['Microsoft.Compute/virtualMachineScaleSets'], json('{}')))]",
      "dependsOn": [
        "[variables('vnetID')]",
        "[variables('loadBalancerSetupId')]",
        "[variables('storageAccountId')]",
        "[variables('customImageId')]"
      ],
      "sku": {
        "name": "[parameters('vmSize')]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "plan": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('plan'), json('null'))]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "UserData": "[base64(concat(variables('customData'), '\n', 'vnet=\"', if(equals(parameters('vnetNewOrExisting'), 'new'), reference('networkNewSetup').outputs.vnetAddressPrefixes.value[0], reference('networkExistingSetup').outputs.vnetAddressPrefixes.value[0]), '\"', '\n' ))]",
          "storageProfile": {
            "osDisk": {
              "caching": "ReadWrite",
              "createOption": "FromImage",
              "managedDisk": {
                "storageAccountType": "[parameters('diskType')]"
              }
            },
            "imageReference": "[variables('imageReference')]"
          },
          "osProfile": {
            "adminPassword": "[parameters('adminPassword')]",
            "adminUsername": "[concat('not','used')]",
            "computerNamePrefix": "[toLower(parameters('vmName'))]",
            "customData": "[base64(concat(variables('customData'), '\n', 'vnet=\"', if(equals(parameters('vnetNewOrExisting'), 'new'), reference('networkNewSetup').outputs.vnetAddressPrefixes.value[0], reference('networkExistingSetup').outputs.vnetAddressPrefixes.value[0]), '\"', '\n' ))]",
            "linuxConfiguration": "[variables('linuxConfiguration')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "eth0",
                "properties": {
                  "primary": true,
                  "enableIPForwarding": false,
                  "enableAcceleratedNetworking": "[not(equals(variables('osVersion'), 'R8010'))]",
                  "networkSecurityGroup": "[if(parameters('deployNewNSG') , variables('NewNsgReference') , parameters('ExistingNSG'))]",
                  "ipConfigurations": [
                    {
                      "name": "ipconfig1",
                      "properties": {
                        "publicIpAddressConfiguration": "[if(equals(parameters('instanceLevelPublicIP'),'yes'), variables('useIpPrefix'), json('null'))]",
                        "subnet": {
                          "id": "[resourceId(variables('vnetRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('Subnet1Name'))]"
                        },
                        "loadBalancerBackendAddressPools": "[if(empty(reference('loadBalancerSetup').outputs.elbId.value), json('null'), reference('loadBalancerSetup').outputs.elbBEAddressPoolProperties.value)]"
                      }
                    }
                  ]
                }
              },
              {
                "name": "eth1",
                "properties": {
                  "primary": false,
                  "enableIPForwarding": true,
                  "enableAcceleratedNetworking": "[not(equals(variables('osVersion'), 'R8010'))]",
                  "ipConfigurations": [
                    {
                      "name": "ipconfig2",
                      "properties": {
                        "subnet": {
                          "id": "[resourceId(variables('vnetRGName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('Subnet2Name'))]"
                        },
                        "loadBalancerBackendAddressPools": "[if(empty(reference('loadBalancerSetup').outputs.ilbId.value), json('null'), reference('loadBalancerSetup').outputs.ilbBEAddressPoolProperties.value)]"
                      }
                    }
                  ]
                }
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": "true",
              "storageUri": "[reference(variables('storageAccountId'), '2021-04-01').primaryEndpoints.blob]"
            }
          }
        },
        "overprovision": false
      }
    },
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2015-04-01",
      "name": "[parameters('vmName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[variables('vmssID')]"
      ],
      "properties": {
        "name": "[parameters('vmName')]",
        "targetResourceUri": "[variables('vmssID')]",
        "notifications": [
          {
            "operation": "Scale",
            "email": {
              "sendToSubscriptionAdministrator": false,
              "sendToSubscriptionCoAdministrators": false,
              "customEmails": "[if(empty(parameters('adminEmail')), json('null'), array(parameters('adminEmail')))]"
            }
          }
        ],
        "enabled": true,
        "profiles": [
          {
            "name": "Profile1",
            "capacity": {
              "minimum": "[parameters('instanceCount')]",
              "maximum": "[parameters('maxInstanceCount')]",
              "default": "[parameters('instanceCount')]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricResourceUri": "[variables('vmssID')]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricResourceUri": "[variables('vmssID')]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 60
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              }
            ]
          }
        ]
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Insights/autoscaleSettings'), parameters('tagsByResource')['Microsoft.Insights/autoscaleSettings'], json('{}')) ]"
    }
  ],
  "outputs": {
    "ApplicationAddress": {
      "type": "string",
      "value": "[reference('loadBalancerSetup').outputs.ApplicationAddress.value]"
    },
    "ApplicationFQDN": {
      "type": "string",
      "value": "[reference('loadBalancerSetup').outputs.ApplicationFQDN.value]"
    }
  }
}