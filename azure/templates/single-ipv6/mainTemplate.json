{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment location"
      },
      "defaultValue": "[resourceGroup().location]"
    },
    "cloudGuardVersion": {
      "type": "string",
      "allowedValues": [
        "R80.40 - Bring Your Own License",
        "R80.40 - Pay As You Go (NGTP)",
        "R80.40 - Pay As You Go (NGTX)",
        "R81 - Bring Your Own License",
        "R81 - Pay As You Go (NGTP)",
        "R81 - Pay As You Go (NGTX)",
        "R81.10 - Bring Your Own License",
        "R81.10 - Pay As You Go (NGTP)",
        "R81.10 - Pay As You Go (NGTX)",
        "R81.20 - Bring Your Own License",
        "R81.20 - Pay As You Go (NGTP)",
        "R81.20 - Pay As You Go (NGTX)"
      ],
      "defaultValue": "R81.10 - Bring Your Own License",
      "metadata": {
        "description": "Version of Check Point CloudGuard"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password"
      },
      "defaultValue": ""
    },
    "authenticationType": {
      "type": "string",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ],
      "defaultValue": "password",
      "metadata": {
        "description": "Authentication type"
      }
    },
    "sshPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Administrator SSH public key"
      }
    },
    "vmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the Check Point Security Gateway"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "Size of the VM"
      }
    },
    "adminShell": {
      "type": "string",
      "defaultValue": "/etc/cli.sh",
      "allowedValues": [
        "/etc/cli.sh",
        "/bin/bash",
        "/bin/csh",
        "/bin/tcsh"
      ],
      "metadata": {
        "Description": "The default shell for the admin user"
      }
    },
    "sicKey": {
      "type": "securestring",
      "metadata": {
        "description": "One time key for Secure Internal Communication"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The name of the virtual network"
      },
      "defaultValue": "vnet"
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the virtual network"
      },
      "defaultValue": "10.0.0.0/16"
    },
    "virtualNetworkIpv6AddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "The IPv6 address prefix of the virtual network"
      },
      "defaultValue": "ace:cab:deca::/48"
    },
    "Subnet1Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the 1st subnet"
      },
      "defaultValue": "Frontend"
    },
    "Subnet1Prefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the 1st subnet"
      },
      "defaultValue": "10.0.0.0/24"
    },
    "Subnet1Ipv6Prefix": {
      "type": "string",
      "metadata": {
        "description": "The IPv6 address prefix of the 1st subnet"
      },
      "defaultValue": "ace:cab:deca:deed::/64"
    },
    "Subnet1StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first available address on the 1st subnet"
      },
      "defaultValue": "10.0.0.10"
    },
    "Subnet2Name": {
      "type": "string",
      "metadata": {
        "description": "The name of the 2nd subnet"
      },
      "defaultValue": "Backend"
    },
    "Subnet2Prefix": {
      "type": "string",
      "metadata": {
        "description": "The address prefix of the 2nd subnet"
      },
      "defaultValue": "10.0.1.0/24"
    },
    "Subnet2Ipv6Prefix": {
      "type": "string",
      "metadata": {
        "description": "The IPv6 address prefix of the 2nd subnet"
      },
      "defaultValue": "ace:cab:deca:deee::/64"
    },
    "Subnet2StartAddress": {
      "type": "string",
      "metadata": {
        "description": "The first available address on the 2nd subnet"
      },
      "defaultValue": "10.0.1.10"
    },
    "vnetNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "Description": "Indicates whether the virtual network is new or existing"
      }
    },
    "virtualNetworkExistingRGName": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the existing virtual network"
      },
      "defaultValue": "[resourceGroup().name]"
    },
    "managementGUIClientNetwork": {
      "type": "string",
      "metadata": {
        "description": "Allowed GUI clients"
      },
      "defaultValue": "0.0.0.0/0"
    },
    "installationType": {
      "type": "string",
      "metadata": {
        "description": "Installation Type"
      },
      "defaultValue": "ipv6Gateway",
      "allowedValues": [
        "standalone",
        "gateway",
        "custom"
      ]
    },
    "bootstrapScript": {
      "type": "string",
      "metadata": {
        "description": "Bootstrap script"
      },
      "defaultValue": ""
    },
    "allowDownloadFromUploadToCheckPoint": {
      "type": "string",
      "allowedValues": [
        "true",
        "false"
      ],
      "defaultValue": "true",
      "metadata": {
        "description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point"
      }
    },
    "additionalDiskSizeGB": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Amount of additional disk space (in GB)"
      },
      "minValue": 0,
      "maxValue": 3995
    },
    "diskType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "The type of the OS disk. Premium is applicable only to DS machine sizes"
      },
      "allowedValues": [
        "Standard_LRS",
        "Premium_LRS"
      ]
    },
    "sourceImageVhdUri": {
      "type": "string",
      "defaultValue": "noCustomUri",
      "metadata": {
        "description": "The URI of the blob containing the development image"
      }
    },
    "_artifactsLocation": {
      "type": "string",
      "metadata": {
        "description": "The base URI where artifacts required by this template are located including a trailing '/'"
      },
      "defaultValue": "https://raw.githubusercontent.com/CheckPointSW/CloudGuardIaaS/master/azure/templates/"
    },
    "_artifactsLocationSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
      },
      "defaultValue": ""
    },
    "tagsByResource": {
      "type": "object",
      "defaultValue": {}
    },
    "deployNewNSG": {
      "type": "bool",
      "defaultValue": true
    },
    "ExistingNSG": {
      "type": "object",
      "defaultValue": {}
    },
    "NewNsgName": {
      "type": "string",
      "defaultValue": "[concat(parameters('vmName'),'-nsg')]"
    }
  },
  "variables": {
    "vnetv4AddressRange": "[parameters('virtualNetworkAddressPrefix')]",
    "vnetv6AddressRange": "[parameters('virtualNetworkIPv6AddressPrefix')]",
    "subnetv4AddressRange": "[parameters('Subnet1Prefix')]",
    "subnet2v4AddressRange": "[parameters('Subnet2Prefix')]",
    "subnetv6AddressRange": "[parameters('Subnet1IPv6Prefix')]",
    "subnet2v6AddressRange": "[parameters('Subnet2IPv6Prefix')]",
    "virtualNetworkName": "[parameters('virtualNetworkName')]",
    "subnetName": "[parameters('Subnet1Name')]",
    "subnet2Name": "[parameters('Subnet2Name')]",
    "templateName": "singleIpv6",
    "templateVersion": "20230124",
    "location": "[parameters('location')]",
    "subnet-id": "[resourceId(parameters('virtualNetworkExistingRGName'), 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
    "subnet2-id": "[resourceId(parameters('virtualNetworkExistingRGName'), 'Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnet2Name'))]",
    "offers": {
      "R80.40 - Bring Your Own License": "BYOL",
      "R80.40 - Pay As You Go (NGTP)": "NGTP",
      "R80.40 - Pay As You Go (NGTX)": "NGTX",
      "R81 - Bring Your Own License": "BYOL",
      "R81 - Pay As You Go (NGTP)": "NGTP",
      "R81 - Pay As You Go (NGTX)": "NGTX",
      "R81.10 - Bring Your Own License": "BYOL",
      "R81.10 - Pay As You Go (NGTP)": "NGTP",
      "R81.10 - Pay As You Go (NGTX)": "NGTX",
      "R81.20 - Bring Your Own License": "BYOL",
      "R81.20 - Pay As You Go (NGTP)": "NGTP",
      "R81.20 - Pay As You Go (NGTX)": "NGTX"
    },
    "offer": "[variables('offers')[parameters('cloudGuardVersion')]]",
    "osVersions": {
      "R80.40 - Bring Your Own License": "R8040",
      "R80.40 - Pay As You Go (NGTP)": "R8040",
      "R80.40 - Pay As You Go (NGTX)": "R8040",
      "R81 - Bring Your Own License": "R81",
      "R81 - Pay As You Go (NGTP)": "R81",
      "R81 - Pay As You Go (NGTX)": "R81",
      "R81.10 - Bring Your Own License": "R8110",
      "R81.10 - Pay As You Go (NGTP)": "R8110",
      "R81.10 - Pay As You Go (NGTX)": "R8110",
      "R81.20 - Bring Your Own License": "R8120",
      "R81.20 - Pay As You Go (NGTP)": "R8120",
      "R81.20 - Pay As You Go (NGTX)": "R8120"
    },
    "osVersion": "[variables('osVersions')[parameters('cloudGuardVersion')]]",
    "installationType": "[parameters('installationType')]",
    "isBlink": "[equals(variables('installationType'), 'gateway')]",
    "storageAccountName": "[concat('bootdiag', uniqueString(resourceGroup().id, deployment().name))]",
    "storageAccountType": "Standard_LRS",
    "diskSize100GB": 100,
    "diskSizeGB": "[add(parameters('additionalDiskSizeGB'), variables('diskSize100GB'))]",
    "customData": "[concat('#!/usr/bin/python3 /etc/cloud_config.py\n', '\n', 'installationType=\"', variables('installationType'), '\"', '\n', 'allowUploadDownload=\"', variables('allowUploadDownload'), '\"', '\n', 'osVersion=\"', variables('osVersion'), '\"', '\n', 'templateName=\"', variables('templateName'), '\"', '\n', 'isBlink=\"', variables('isBlink'), '\"', '\n', 'templateVersion=\"', variables('templateVersion'), '\"', '\n', 'bootstrapScript64=\"', variables('bootstrapScript64'), '\"', '\n', 'location=\"', variables('location'), '\"', '\n', 'sicKey=\"', variables('sicKey'), '\"', '\n', 'managementGUIClientNetwork=\"', variables('managementGUIClientNetwork'), '\"', '\n', 'adminShell=\"', parameters('adminShell'), '\"', '\n')]",
    "imageOffer": "[concat('check-point-cg-', toLower(variables('osVersion')))]",
    "imagePublisher": "checkpoint",
    "imageSku": "[if(and(equals(parameters('installationType'), 'standalone'), or(equals(variables('osVersion'),'R8040'), equals(variables('osVersion'),'R81'))), 'mgmt-byol', 'sg-byol')]",
    "imageReferenceBYOL": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "[variables('imageSku')]",
      "version": "latest"
    },
    "imageReferenceNGTP": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp",
      "version": "latest"
    },
    "imageReferenceNGTP-V2": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtp-v2",
      "version": "latest"
    },
    "imageReferenceNGTX": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtx",
      "version": "latest"
    },
    "imageReferenceNGTX-V2": {
      "offer": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]",
      "sku": "sg-ngtx-v2",
      "version": "latest"
    },
    "imageReferenceMarketplace": "[if(equals(variables('offer'), 'BYOL'), variables('imageReferenceBYOL'), if(equals(variables('offer'), 'NGTP'), variables('imageReferenceNGTP'), if(equals(variables('offer'), 'NGTP-V2'), variables('imageReferenceNGTP-V2'), if(equals(variables('offer'), 'NGTX'), variables('imageReferenceNGTX'), if(equals(variables('offer'), 'NGTX-V2'), variables('imageReferenceNGTX-V2'), json('null'))))))]",
    "customImage": "customImage",
    "imageReferenceCustomUri": {
      "id": "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
    },
    "imageReference": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('imageReferenceMarketplace'), variables('imageReferenceCustomUri'))]",
    "nic1Name": "[concat(parameters('vmName'), '-eth0')]",
    "nic2Name": "[concat(parameters('vmName'), '-eth1')]",
    "linuxConfigurationpassword": {
      "disablePasswordAuthentication": "false"
    },
    "linuxConfigurationsshPublicKey": {
      "disablePasswordAuthentication": "true",
      "ssh": {
        "publicKeys": [
          {
            "keyData": "[parameters('sshPublicKey')]",
            "path": "/home/notused/.ssh/authorized_keys"
          }
        ]
      }
    },
    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'),  variables('linuxConfigurationpassword'), variables('linuxConfigurationsshPublicKey'))]",
    "planBYOL": {
      "name": "[variables('imageSku')]",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP": {
      "name": "sg-ngtp",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTP-V2": {
      "name": "sg-ngtp-v2",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTX": {
      "name": "sg-ngtx",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "planNGTX-V2": {
      "name": "sg-ngtx-v2",
      "product": "[variables('imageOffer')]",
      "publisher": "[variables('imagePublisher')]"
    },
    "plan": "[if(equals(variables('offer'), 'BYOL') , variables('planBYOL'), if(equals(variables('offer'), 'NGTP'), variables('planNGTP'), if(equals(variables('offer'), 'NGTP-V2'), variables('planNGTP-V2'), if(equals(variables('offer'), 'NGTX'), variables('planNGTX'), if(equals(variables('offer'), 'NGTX-V2'), variables('planNGTX-V2'), json('null'))))))]",
    "bootstrapScript64": "[base64(parameters('bootstrapScript'))]",
    "allowUploadDownload": "[parameters('allowDownloadFromUploadToCheckPoint')]",
    "networkSetupURL": "[uri(parameters('_artifactsLocation'), concat('nestedtemplates/vnet-', parameters('vnetNewOrExisting'), '.json', parameters('_artifactsLocationSasToken')))]",
    "sicKey": "[parameters('sicKey')]",
    "managementGUIClientNetwork": "[parameters('managementGUIClientNetwork')]",
    "NewNsgReference": {
      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('NewNsgName'))]"
    }
  },
  "resources": [
    {
      "apiVersion": "2020-06-01",
      "name": "pid-14dc7680-7a2f-483c-b3ec-2c0cfae477aa",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2021-06-01",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "allowBlobPublicAccess": false,
        "minimumTlsVersion": "TLS1_2"
      },
      "location": "[variables('location')]",
      "sku": {
        "name": "[variables('storageAccountType')]"
      },
      "kind": "Storage",
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Storage/storageAccounts'), parameters('tagsByResource')['Microsoft.Storage/storageAccounts'], json('{}')) ]"
    },
    {
      "apiVersion": "2020-05-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "lbpublicip-v4",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), parameters('tagsByResource')['Microsoft.Network/publicIPAddresses'], json('{}')) ]"
    },
    {
      "apiVersion": "2020-05-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "lbpublicip-v6",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "publicIPAddressVersion": "IPv6"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/publicIPAddresses'), parameters('tagsByResource')['Microsoft.Network/publicIPAddresses'], json('{}')) ]"
    },
    {
      "apiVersion": "2020-05-01",
      "name": "loadBalancer",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses','lbpublicip-v4')]",
        "[resourceId('Microsoft.Network/publicIPAddresses','lbpublicip-v6')]"
      ],
      "properties": {
        "frontendIpConfigurations": [
          {
            "name": "LB-v4",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', 'lbpublicip-v4')]"
              }
            }
          },
          {
            "name": "LB-v6",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses','lbpublicip-v6')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "LBBAP-v4"
          },
          {
            "name": "LBBAP-v6"
          }
        ],
        "loadBalancingRules": [
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'loadBalancer', 'LB-v4')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'loadBalancer', 'LBBAP-v4')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'loadBalancer', 'lb-probe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "idleTimeoutInMinutes": 4
            },
            "name": "lb-rule-v4"
          },
          {
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIpConfigurations', 'loadBalancer', 'LB-v6')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'loadBalancer', 'LBBAP-v6')]"
              },
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', 'loadBalancer', 'lb-probe')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443
            },
            "name": "lb-rule-v6"
          }
        ],
        "probes": [
          {
            "properties": {
              "protocol": "Tcp",
              "port": 22,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            },
            "name": "lb-probe"
          }
        ]
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/loadBalancers'), parameters('tagsByResource')['Microsoft.Network/loadBalancers'], json('{}')) ]"
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "condition": "[and(parameters('deployNewNSG'),equals(parameters('vnetNewOrExisting'), 'new'))]",
      "apiVersion": "2020-06-01",
      "location": "[parameters('location')]",
      "name": "[parameters('NewNsgName')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowAllInBound",
            "properties": {
              "description": "Allow all inbound connections",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": "100",
              "direction": "Inbound"
            }
          }
        ]
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkSecurityGroups'), parameters('tagsByResource')['Microsoft.Network/networkSecurityGroups'], json('{}')) ]"
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'new')]",
      "apiVersion": "2021-05-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "dhcpOptions": {
          "dnsServers": [
            "cafe:43::",
            "cafe:45::"
          ]
        },
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetv4AddressRange')]",
            "[variables('vnetv6AddressRange')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefixes": [
                "[variables('subnetv4AddressRange')]",
                "[variables('subnetv6AddressRange')]"
              ]
            }
          },
          {
            "name": "[variables('subnet2Name')]",
            "properties": {
              "addressPrefixes": [
                "[variables('subnet2v4AddressRange')]",
                "[variables('subnet2v6AddressRange')]"
              ]
            }
          }
        ]
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/virtualNetworks'), parameters('tagsByResource')['Microsoft.Network/virtualNetworks'], json('{}')) ]"
    },
    {
      "condition": "[equals(parameters('vnetNewOrExisting'), 'existing')]",
      "name": "networkExistingSetup",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-05-01",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('networkSetupURL')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[variables('location')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkExistingRGName": {
            "value": "[parameters('virtualNetworkExistingRGName')]"
          },
          "tagsByResource": {
            "value": "[parameters('tagsByResource')]"
          },
          "deployNsg": {
            "value": "[parameters('deployNewNSG')]"
          },
          "NewNsgName": {
            "value": "[parameters('NewNsgName')]"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-06-01",
      "dependsOn": [
        "[coalesce(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), resourceId('Microsoft.Resources/deployments', 'networkExistingSetup'))]",
        "[resourceId('Microsoft.Network/loadBalancers','loadBalancer')]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('nic1Name')]",
      "properties": {
        "networkSecurityGroup": "[if(parameters('deployNewNSG') , variables('NewNsgReference') , parameters('ExistingNSG'))]",
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[not(equals(variables('osVersion'), 'R8010'))]",
        "ipConfigurations": [
          {
            "name": "ipconfig-v4",
            "properties": {
              "privateIPAddress": "[parameters('Subnet1StartAddress')]",
              "privateIPAllocationMethod": "Static",
              "privateIPAddressVersion": "IPv4",
              "primary": true,
              "subnet": {
                "id": "[variables('subnet-id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'loadBalancer', 'LBBAP-v4')]"
                }
              ]
            }
          },
          {
            "name": "ipconfig-v6",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "privateIPAddressVersion": "IPv6",
              "subnet": {
                "id": "[variables('subnet-id')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', 'loadBalancer', 'LBBAP-v6')]"
                }
              ]
            }
          }
        ]
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], json('{}')) ]"
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-06-01",
      "dependsOn": [
        "[coalesce(resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName')), resourceId('Microsoft.Resources/deployments', 'networkExistingSetup'))]",
        "[resourceId('Microsoft.Network/loadBalancers','loadBalancer')]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('nic2Name')]",
      "properties": {
        "enableIPForwarding": true,
        "enableAcceleratedNetworking": "[not(equals(variables('osVersion'), 'R8010'))]",
        "ipConfigurations": [
          {
            "name": "ipconfig-v4",
            "properties": {
              "privateIPAddress": "[parameters('Subnet2StartAddress')]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('subnet2-id')]"
              }
            }
          },
          {
            "name": "ipconfig-v6",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "privateIPAddressVersion": "IPv6",
              "subnet": {
                "id": "[variables('subnet2-id')]"
              }
            }
          }
        ]
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Network/networkInterfaces'), parameters('tagsByResource')['Microsoft.Network/networkInterfaces'], json('{}')) ]"
    },
    {
      "condition": "[not(equals(parameters('sourceImageVhdUri'), 'noCustomUri'))]",
      "type": "Microsoft.Compute/images",
      "apiVersion": "2020-06-01",
      "name": "[variables('customImage')]",
      "location": "[variables('location')]",
      "properties": {
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "osState": "Generalized",
            "blobUri": "[parameters('sourceImageVhdUri')]",
            "storageAccountType": "Standard_LRS"
          }
        },
        "hyperVGeneration": "V1"
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/images'), parameters('tagsByResource')['Microsoft.Compute/images'], json('{}')) ]"
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-07-01",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nic1Name'))]",
        "[resourceId('Microsoft.Network/networkInterfaces', variables('nic2Name'))]",
        "[resourceId('Microsoft.Compute/images/', variables('customImage'))]"
      ],
      "location": "[variables('location')]",
      "name": "[parameters('vmName')]",
      "plan": "[if(equals(parameters('sourceImageVhdUri'),'noCustomUri'), variables('plan'), json('null'))]",
      "properties": {
        "UserData": "[base64(variables('customData'))]",
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2021-06-01').primaryEndpoints.blob]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic1Name'))]",
              "properties": {
                "primary": true
              }
            },
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nic2Name'))]",
              "properties": {
                "primary": false
              }
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[parameters('adminPassword')]",
          "adminUsername": "[concat('not','used')]",
          "computerName": "[toLower(parameters('vmName'))]",
          "customData": "[base64(variables('customData'))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "diskSizeGB": "[variables('diskSizeGB')]",
            "name": "[parameters('vmName')]",
            "managedDisk": {
              "storageAccountType": "[parameters('diskType')]"
            }
          }
        }
      },
      "tags": "[ if(contains(parameters('tagsByResource'), 'Microsoft.Compute/virtualMachines'), parameters('tagsByResource')['Microsoft.Compute/virtualMachines'], json('{}')) ]"
    }
  ]
}